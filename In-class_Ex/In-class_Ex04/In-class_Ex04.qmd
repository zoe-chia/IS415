---
title: "In class Exercise 4: Ch 4 - 1st Order Spatial Point Paterns Analysis"
date-modified: "`r Sys.Date()`"
date: "30 January 2023"
execute: 
  message: false
  warning: false
editor: visual
---

## Importing packages and loading data

### Loading packages

tmap exposes leaflet

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```

### Loading data

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

#### Mapping the geospatial datasets

```{r}
st_geometry(childcare_sf)
```

```{r}
st_geometry(sg_sf)
```

```{r}
st_geometry(mpsz_sf)
```

```{r}
tm_shape(mpsz_sf)+ tm_polygons() + tm_shape(childcare_sf) + tm_dots()
```

**Pin map**

tmap_mode('view') : Interactive map, default

tmap_mode('plot') : Static map

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots(alph = 0.5, size=0.01) + 
  tm_view(set.zoom.limits = c(11,15), alpha = 1)
  tmap_mode('plot')
  
# https://r-tmap.github.io/tmap/reference/tm_view.html
# tm_dots(alph = 0.5, size=0.01)
```

## Geospatial Data Wrangling

Our data is imported as simple feature formats. spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first. Simple feature format --\> Spatial classes/dataframe --\> generic spatial object --\> ppp format

### Converting sf data frames to sp's Spatial\* class

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

### Converting the Spatial\* class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

### Converting to ppp format

x,y co-ordinates in two column form.

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

### Handling duplicated points

Check for duplicated points

```{r}
any(duplicated(childcare_ppp))
```

Count number of co-incidence points

```{r}
multiplicity(childcare_ppp)
```

To identify how many locations have more than one point event:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

View the locations of these duplicate point events:

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
tmap_mode('plot')
```

::: callout-tip
## How do we identify duplicates?

-   Remove duplicates, however, this also removes some useful data points.

-   Jittering: Adding a small perturbation to the duplicate points so that they do not occupy the exact same space.

    ```{r}
    childcare_ppp_jit <- rjitter(childcare_ppp, 
                                 retry=TRUE, 
                                 nsim=1, 
                                 drop=TRUE)
    ```

    Check if duplicates still exist.

    ```{r}
    any(duplicated(childcare_ppp_jit))
    ```

-   Make each point unique then attach the duplicates of the points to the patterns as marks, as attributes of the points.
:::

### Creating own object

In spatstat, an object called owin is specially designed to represent the polygonal region that the analysis is confined to, for example, Singapore.

```{r}
sg_owin <- as(sg_sp, "owin")
```

Display the output using plot():

```{r}
plot(sg_owin)
```

### Combining point events object and owin object

To extract childcare events that are located within Singapore:

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

## First order Spatial Point Patterns Analysis

### Kernel Density Estimation (KDE)

Compute the KDE of childcare services in Singapore \#### Computing kernel density estimation using automatic bandwidth selection method

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in "number of points per square meter".

To retrive the bandwidth used to compute the kde layer:

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescaling KDE values

rescale() is used to convert meter to kilometer.

```{r}
childcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, "km")
```

Plot the output kde map using the rescaled data:

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Data values are now fixed.

### Working with different automatic bandwidth methods

Other spatstat functions to determine bandwidth:

-   bw.CvL()

-   bw.scott()

-   bw.ppl()

    -   tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.

```{r}
 bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

-   If the purpose of once study is to detect a single tight cluster in the midst of random noise then the *bw.diggle()* method seems to work best.

Comparing *bw.diggle* and *bw.ppl* methods:

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### Working with different kernel methods

The default kernel method used in density.ppp() is gaussian. Other kernel methods: - Epanechnikov - Quartic - Disc

#### Comparing the different kernel functions

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## Fixed and Adaptive KDE

### Computing KDE by using fixed bandwidth

As the unit of measurement of childcareSG_ppp.km object is in kilometer, 600m is converted to 0.6km. In the code chunk below, we define a bandwidth of 600m, with sigma as 0.6.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### Adaptive Bandwidth

Fixed bandwidth is very sensitive to highly skewed distribution of spatial point patterns over geographical units for example urban versus rural. Hence, we use adaptive bandwidth instead.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

Comparing fixed and adpative kernel density estimation:

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### Converting KDE output into grid object

We convert this so that it is suitable for mapping purposes.

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

### Convert gridded output into raster

::: callout-note
what does raster do
:::

```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
```

Study the properties:

```{r}
kde_childcareSG_bw_raster
```

CRS property is NA!

### Visualising the output in tmap

Display raster in catrtographic quality map

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### Comparing spatial Point Patterns with KDE

#### Extract the area of study

We will use Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

Plot these areas:

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

#### Convert the spatial point data frame into generic sp format

```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```

#### Create owin object

```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```

#### Combine childcare points and area of study

Extract childcare that is within the specific region

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

rescale() to transform metre to kilometre:

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

Plot the study areas and the locations of the childcare centres:

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### Compute KDE

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

#### Computing fixed bandwidth KDE

We will use 250m (sigma = 0.25) as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## Nearest Neighbour Analysis

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

### Clark and Evans Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

Conclusion:

### Clark and Evan Test: Tampines planning area

Analysethe spatial point patterns of childcare centres in Tampines:

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```
