[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "",
    "text": "pacman::p_load(dplyr, olsrr, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary, readr, corrplot)\n\n\n\n\n\nThe shapefile consists of URA Master Plan 2014’s planning subzone boundaries. The GIS data is in svy21 projected coordinates systems, and does not have EPSG information. We hence have to update it with the correct EPSG cod3, 3414.\n\nmpsz = st_read(\n  dsn = \"data/geospatial\", \n  layer = \"MP14_SUBZONE_WEB_PL\") %>%\n  st_transform(crs = 3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zoe-chia\\IS415\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nVerify the projection\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_bbox(mpsz) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nConvert aspatial df to sf\n\nst_as_sf() to convert tibble dataframe to simple feature data frame.\nst_transform() to convert coordinates from wgs84 (crs=4326) to svy21 (crs=3414).\n\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#distribution-of-selling-price",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#distribution-of-selling-price",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Distribution of SELLING PRICE",
    "text": "Distribution of SELLING PRICE\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\nThe distribution of SELLING_PRICE is right skewed, which means that more condominiums were transacted at a lower price.\n\n\nNormalise the distribution with LOG\n\nNormalise\n\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nPlot\n\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nThe distribution becomes less skewed after the transformation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plot-multiple-histograms-with-different-variables",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plot-multiple-histograms-with-different-variables",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Plot Multiple Histograms with Different Variables",
    "text": "Plot Multiple Histograms with Different Variables\n\nCreate 12 histograms with ggplot() + geom_histogram()\nggarrange() is used to organise the histograms into 3 columns and 4 rows.\n\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n# ggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n#          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n#          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n#         ncol = 3, nrow = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#drawing-statistical-point-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#drawing-statistical-point-map",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Drawing Statistical Point Map",
    "text": "Drawing Statistical Point Map\n\nSet to interactive mode\n\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\n\nCreate interactive point symbol map\n\n\ntm_shape(mpsz)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#a-simple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#a-simple-linear-regression-method",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "(A) Simple Linear Regression Method",
    "text": "(A) Simple Linear Regression Method\nWe will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class, c(“mlm”, “lm”).\nThe functions summary() and anova() print a summary and analysis of variance table of results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe output report reveals that the SELLING_PRICE can be explained by the following formula:\ny = -258121.1 + 14719 x\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE.\nThe above model is hence a good estimator of SELLING_PRICE.\n\n\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nThe figure above shows that there are a few statistical outliers with relatively high selling prices."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-the-relationships-of-the-independent-variables",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-the-relationships-of-the-independent-variables",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Visualising the relationships of the independent variables",
    "text": "Visualising the relationships of the independent variables\n\nAvoid multicollinearity: Ensure that variables that are highly correlated to each other are not used.\nMethods in corrplot: “AOE”, “FPC”, “hclust”, “alphabet”\n\nWe use AOE, which orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\n\n\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASEHOLD_99YR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASEHOLD_99YR is excluded in the subsequent model building."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-a-hedonic-pricing-model-using-mlr",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-a-hedonic-pricing-model-using-mlr",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Building a Hedonic Pricing Model using MLR",
    "text": "Building a Hedonic Pricing Model using MLR\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nFrom the above report it is clear that not all the independent variables are statistically significant. We will revise the model by removing those variables which are not statistically significant."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparing-publication-quality-table-olsrr",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparing-publication-quality-table-olsrr",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Preparing Publication Quality Table: olsrr",
    "text": "Preparing Publication Quality Table: olsrr\nCalibrate the revised model by using the code chunk below:\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparing-publication-quality-table-gtsummary",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparing-publication-quality-table-gtsummary",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Preparing Publication Quality Table: gtsummary",
    "text": "Preparing Publication Quality Table: gtsummary\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\n# tbl_regression(condo.mlr1, intercept = TRUE)\n\n\n# tbl_regression(condo.mlr1, \n#               intercept = TRUE) %>% \n#  add_glance_source_note(\n#    label = list(sigma ~ \"\\U03C3\"),\n#    include = c(r.squared, adj.r.squared, \n#                AIC, statistic,\n#                p.value, sigma))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#check-for-multicollinearity",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#check-for-multicollinearity",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Check for multicollinearity",
    "text": "Check for multicollinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#test-for-non-linearity",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#test-for-non-linearity",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Test for non-linearity",
    "text": "Test for non-linearity\nIn multiple linear regression, it is important for us to test the assumption of linearity and additivity of the relationship between dependent and independent variables.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe figure above reveals that most of the data points are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#test-for-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#test-for-normality-assumption",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Test for Normality Assumption",
    "text": "Test for Normality Assumption\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom the figure above, the residual of the multiple linear regression model resembles a normal distribution.\n\n\nStatistical Table:\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#testing-for-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#testing-for-spatial-autocorrelation",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Testing for Spatial Autocorrelation",
    "text": "Testing for Spatial Autocorrelation\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\n\nExport the residual of the hedonic pricing model and save it as a dataframe.\n\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\n\nJoin the newly created dataframe with condo_resale.sf object.\n\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\n\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\nDisplay the distribution with tmap\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThe figure above shows that there is signs of spatial autocorrelation.\nWe should conduct the Moran’s I Test to proof that the observation is true.\n\nMoran’s I Test\n\nCompute the distance-based weight matrix with spdep\n\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\n\nConvert the output neighbours list into spatial weights\n\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\nPerform the Moran’s I test for residual spatial autocorrelation\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-fixed-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-fixed-bandwidth-gwr-model",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Building Fixed Bandwidth GWR Model",
    "text": "Building Fixed Bandwidth GWR Model\n\n1. Computing the fixed bandwidth\n\nbw.gwr() is used to determine the optimal fixed bandwidth\nadaptive = FALSE to indicate computing the fixed bandwidth\nstopping rule can either be (i) CV cross-validation approach or (ii) AIC corrected approach. This rule is defined using the approach parameter.\n\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe recommended bandwidth is at 971.3405 metres. The model chooses the smallest number that give a reply.\n\n\nGWModel Method: Fixed Bandwidth\nCalibrate the gwr model using the fixed bandwidth and gaussian kernel\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved as “gwr”. Display the output:\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-13 15:09:03 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-03-13 15:09:05 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the global multiple linear regression model of 42967.1."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-an-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-an-adaptive-bandwidth-gwr-model",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Building an Adaptive Bandwidth GWR Model",
    "text": "Building an Adaptive Bandwidth GWR Model\n\nSet adaptive = TRUE\n\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\nConstruct the adaptive bandwidth GWR model\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-13 15:09:16 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-03-13 15:09:18 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-gwr-output",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-gwr-output",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Visualising GWR Output",
    "text": "Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#converting-sdf-to-sf-dataframe",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#converting-sdf-to-sf-dataframe",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Converting SDF to sf dataframe",
    "text": "Converting SDF to sf dataframe\nWe have to convert SDF into sf dataframe to visualise the fields.\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-local-r2",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-local-r2",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Visualising local R2",
    "text": "Visualising local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-coefficient-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-coefficient-estimates",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "Visualising coefficient estimates",
    "text": "Visualising coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE <- tm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy URA Planning Region\n\ntm_shape(mpsz[mpsz$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#reference-1",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#reference-1",
    "title": "Hands-on_Ex07: Geographically Weighted Regression",
    "section": "13.10 Reference",
    "text": "13.10 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home_Ex03",
    "section": "",
    "text": "Housing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, Geographical Weighted Models were introduced for calibrating predictive model for housing resale prices.\n\n\n\nPredict the HDB resale prices (4-room) for the month of January and February 2023 using data from 1st January 2021 to 31st December 2022 as the training dataset.\nCompare the results of the prediction by the conventional OLS method and the Geographically Weighted method."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#datasets",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#datasets",
    "title": "Take-home_Ex03",
    "section": "1.1 Datasets",
    "text": "1.1 Datasets\n\nAspatial Data\n\nHDB resale prices in Singapore from January 2021 to February 2023. It is in csv format and can be downloaded from Data.gov.sg.\n\nGeospatial Data\n\n2019 Master Plan Planning Subzone\n\nLocational factors with geographic coordinates\n\nChildcare data in geojson format.\nEldercare data in shapefile format.\nHawker centre data in geojson format.\nParks data in geojson format.\nMRT stations data in shapefile format.\nSupermarkets data in geojson format.\n\nLocational factors without geographic coordinates\n\nCBD Coordinates to be scraped and obtained from Google.\nPrimary schools data in csv format.\nGood primary schools scraped from Local Salary Forum."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#install-and-load-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#install-and-load-packages",
    "title": "Take-home_Ex03",
    "section": "1.2 Install and Load Packages",
    "text": "1.2 Install and Load Packages\n\npacman::p_load(dplyr, rvest, olsrr, ggpubr, sf, spdep, GWmodel, SpatialML, rsample, Metrics, tmap, gtsummary, readr, corrplot, tidyverse, httr, jsonlite, broom)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-data",
    "title": "Take-home_Ex03",
    "section": "1.3 Loading data",
    "text": "1.3 Loading data\n\nresale <- read_csv(\"data/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\n\n1.3.1 Filtering Data\nWe will filter our data to focus on:\n\n4-Room HDB flat sub-market.\nprices from 1st January 2021 to 31st December 2022\n\n\nresale_focused <- filter(resale, flat_type == \"4 ROOM\") %>%\n  filter(month >= \"2021-01\" & month <= \"2023-02\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-wrangling",
    "title": "Take-home_Ex03",
    "section": "2. Data Wrangling",
    "text": "2. Data Wrangling"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#transforming-resale-data",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#transforming-resale-data",
    "title": "Take-home_Ex03",
    "section": "2.1 Transforming resale data",
    "text": "2.1 Transforming resale data\nWe require the Area of the unit, Floor level, Remaining lease (months), Age of the unit.\n\nThe data is currently in Years and Months. We will have to standardise it so that calculation will be easier.\nOur data also does not have coordinates. We will hence have to concatenate the block number and street name, then retrieve the coordinates from OneMap.\nTo get the age of unit, we need to subtract lease_commencement_date from month\n\n\nrs_transform <- resale_focused %>% \n  mutate(resale_focused, address = paste(block, street_name)) %>%\n  mutate(resale_focused, \n         remaining_lease_yr = as.integer(str_sub(remaining_lease, 0, 2))) %>%\n  mutate(resale_focused,\n         remaining_lease_mth = as.integer(str_sub(remaining_lease, 9, 11))) %>%\n  mutate(resale_focused, \n         age_of_unit = as.integer(str_sub(month, 0, 4)) - as.integer(lease_commence_date))\n\nNow, we have to:\n\nConvert number of years to months by multiplying by 12 for age of unit and remaining lease year.\nConvert all the NAs in remaining_lease_mth into 0s so that we can add the two columns together.\nStore this in a new column called remaining_lease_mths.\n\n\nrs_transform$remaining_lease_mth[is.na(rs_transform$remaining_lease_mth)] <- 0\nrs_transform$remaining_lease_yr <- rs_transform$remaining_lease_yr * 12\nrs_transform$age_of_unit <- rs_transform$age_of_unit * 12\nrs_transform <- rs_transform %>% \n  mutate(rs_transform, remaining_lease_mths = rowSums(rs_transform[, c(\"remaining_lease_yr\", \"remaining_lease_mth\")])) %>%\n  select(month, town, address, block, street_name, flat_type, storey_range, floor_area_sqm, flat_model, age_of_unit,\n         lease_commence_date, remaining_lease_mths, resale_price)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#retrieve-postal-codes-and-coordinates-of-addresses",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#retrieve-postal-codes-and-coordinates-of-addresses",
    "title": "Take-home_Ex03",
    "section": "2.2 Retrieve Postal Codes and Coordinates of Addresses",
    "text": "2.2 Retrieve Postal Codes and Coordinates of Addresses\n\n2.2.1 Create a list storing unique addresses\n\nWe create a list to store unique addresses to ensure that we do not run the GET request more than what is necessary\nWe can also sort it to make it easier for us to see at which address the GET request will fail.\nHere, we use unique() function of base R package to extract the unique addresses then use sort() function of base R package to sort the unique vector.\n\n\naddress_list <- sort(unique(rs_transform$address))\n\n\n\n2.2.2 Creating a function to retrieve coordinates from OneMap\n1.  Firstly, we create a dataframe called `postal_coords` to store all the final retrieved coordinates\n\n\n2.  Secondly, we first use *GET()* function of httr package to make a GET request to [*https://developers.onemap.sg/commonapi/search*](https://developers.onemap.sg/commonapi/search)\n\n-   OneMap SG offers functions for us to query spatial data from the API in a tidy format and provides additional functionalities to allow easy data manipulation.**\n\n-   Here, we will be using their REST APIs to search address data for a given search value and retrieve the coordinates of the searched location.**\n\n-   The required variables to be included in the GET request is as follows:\n\n    -   **`searchVal`**: Keywords entered by user that is used to filter out the results.\n\n    -   **`returnGeom`** {Y/N}: Checks if user wants to return the geometry.\n\n    -   **`getAddrDetails`** {Y/N}: Checks if user wants to return address details for a point.\n\n-   **Note**:\n\n    -   The JSON response returned will contain multiple fields.\n\n    -   However, we are only interested in the postal code and coordinates like Latitude & Longitude.\n\n    -   On their website, they also made an announcement on a minor text fix where they changed the word \\\"LONGTITUDE\\\" to \\\"LONGITUDE\\\" which we will be using the latter in this analysis.\n\n\n3.  We then create a dataframe `new_row` which will be used to store each final set of coordinates retrieved during the loop\n\n\n4.  We also need to check the number of responses returned and append to the main dataframe accordingly. This is because:\n\n-   The no. of returned responses of the searched location, (indicated by variable `found`) , varies as some location might have only a single result while other locations might return multiple results.\n\n    -   For example, the address 2 JLN BATU returns 3 sets of postal codes and coordinates ( meaning `found` = 3).\n\n    -   Hence, what we can do is to first look at only those that does not have empty postal codes then take the first set/row of the coordinates\n\n-   We can also check to see if the address is invalid by looking at the number of rows returned by request.\n\n-   There will also be some addresses searched that are invalid. ( means `found` = 0)\n\n-   This step was helpful in determining what was causing the error of the API Call. We will see in the later section what errors was caused by the invalid searched errors.\n\n\n5.  Lastly, we will append the returned response (`new_row`) with the necessary fields to the main dataframe (`postal_coords`) using *rbind()* function of base R package.\n\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://developers.onemap.sg/commonapi/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, postal = postal, latitude = lat, longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, postal = NA, latitude = NA, longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\n\n\n2.2.3 Retrieve resale coordinates\n\ncoords <- get_coords(address_list)\n\nCheck if there are any NA/NIL values\n\ncoords[(is.na(coords$postal) | is.na(coords$latitude) | is.na(coords$longitude) | coords$postal==\"NIL\"), ]\n\n\nLooking for 215 Choa Chu Kang Central on OneMap returns us with “Blk 215 and 216 Choa Chu Kang Central” with two different postal codes. This could be the reason why a postal code was not assigned. However, since we have the coordinates, we can proceed.\n\n\n2.2.4 Combine resale and coordinates data\n\nrs_coords <- left_join(rs_transform, coords, by = c('address' = 'address'))\n\n\nhead(rs_coords)\n\n\nrs_coords_final <- rs_coords %>% select(c(\"latitude\", \"longitude\"))\n\n\n\nWrite file to rds\n\nrs_coords_rds <- write_rds(rs_coords, \"data/aspatial/rds/rs_coords.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "",
    "text": "In this hands-on experience, we will learn how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#installing-packages",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#installing-packages",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "Installing packages",
    "text": "Installing packages\n\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, ggpubr, olsrr, devtools, tidymodels, rsample, tidyverse)\n\npackage 'tidymodels' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Asus\\AppData\\Local\\Temp\\RtmpaKblEH\\downloaded_packages"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#importing-geospatial-data",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nmdata <- read_rds(\"data/aspatial/mdata.rds\")\n\n\n# #| eval: false\n# library(rsample)\nset.seed(1234) # ensure it's reproducible\nresale_split <- initial_split(mdata,\n                              prop = 6.5/10,) # 35% test data \n\n\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\n\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n\n\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL +\n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data = train_data)\nsummary(price_mlr)\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\nstorey_order              14299.298    339.115  42.167  < 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,    Adjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16\n\n\n\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#gwr-predictive-method",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#gwr-predictive-method",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "gwr predictive method",
    "text": "gwr predictive method\n\nConverting sf to SpatialPointDataFrame\n\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\n\n\nComputing adaptive bandwidth\n\n#bw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n#                  storey_order + remaining_lease_mths +\n#                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n#                  PROX_MRT + PROX_PARK + PROX_MALL +\n#                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n#                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n#                  WITHIN_1KM_PRISCH,\n#                  data = train_data_sp,\n#                  approach = \"CV\",\n#                  kernel=\"gaussian\", \n#                  adaptive=TRUE, \n#                  longlat=FALSE\n#                      )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#preparing",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#preparing",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "Preparing",
    "text": "Preparing\n\n# keep data with geometry information in coordinates file\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\nWrite to RDS\n\ncoords_train <- write_rds(coords_train, \"data/model/coords_train.rds\")\ncoords_test <- write_rds(coords_test, \"data/model/coords_test.rds\")\n\n\nDropping geometry field\n\ntrain_data <- train_data %>%\n  st_drop_geometry()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#calibrating-random-forest",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#calibrating-random-forest",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "Calibrating Random Forest",
    "text": "Calibrating Random Forest\n\n#set.seed(1234)\n#rf <- ranger(resale_price ~ floor_area_sqm +\n#                  storey_order + remaining_lease_mths +\n#                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n#                  PROX_MRT + PROX_PARK + PROX_MALL +\n#                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n#                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n#                  WITHIN_1KM_PRISCH,\n#                data = train_data)\n\n\nprint(rf)\n\nfunction (n, df1, df2, ncp) \n{\n    if (missing(ncp)) \n        .Call(C_rf, n, df1, df2)\n    else (rchisq(n, df1, ncp = ncp)/df1)/(rchisq(n, df2)/df2)\n}\n<bytecode: 0x0000017073725f20>\n<environment: namespace:stats>"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#calibrating-geographically-weighted-random-forest-model",
    "href": "In-class_Ex/In-class_Ex08/In-class_Ex08.html#calibrating-geographically-weighted-random-forest-model",
    "title": "In-class_Ex08: Geographically Weighted Random Forest",
    "section": "Calibrating Geographically Weighted Random Forest Model",
    "text": "Calibrating Geographically Weighted Random Forest Model\n\n#set.seed(1234)\n#gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm +\n#                  storey_order + remaining_lease_mths +\n#                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n#                  PROX_MRT + PROX_PARK + PROX_MALL +\n#                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n#                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n#                  WITHIN_1KM_PRISCH,\n#                  dframe = train_data, \n#                  kernel = \"adaptive\",\n#                  coords = coords_train)\n\n\n#gwRF_adaptive <- write_rds()\n\nin console: gwRF_adaptive $ Global.Model $ variable.importance\nvi_df <- as.data.frame(gwRF_adaptive $ Global.Model $ variable.importance)\n\nPredicting using test data\n\nPreparing test data\n\n#test_data <- cbind(test_data, coords_test) %>% \n#  st_drop_geometry()\n\n\n#gwRF_pred <- predict.grf(gwRF_adaptive, \n#                         test_data, \n#                         x.var.name = \"X\",\n#                         y.var.name = \"Y\",\n#                         local.w=1, #calibrate local version of your model\n#                         global.w=0)\n# output is a vector\n\n\n# convert to dataframe to combine with original test data  \n# gwRF_pred_df <- as.data.frame(gwRF_pred)\n\n\n# sqrt(mean((test_predict$resale_price - test_predict$predict_grf)^2))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Since late December 2019, an outbreak of a novel coronavirus disease (COVID-19; previously known as 2019-nCoV) was reported in Wuhan, China, which had subsequently affected 210 countries worldwide. In general, COVID-19 is an acute resolved disease but it can also be deadly, with a 2% case fatality rate.\nThe COVID-19 vaccination in Indonesia is an ongoing mass immunisation in response to the COVID-19 pandemic in Indonesia. On 13 January 2021, the program commenced when President Joko Widodo was vaccinated at the presidential palace. In terms of total doses given, Indonesia ranks third in Asia and fifth in the world.\nAccording to wikipedia, as of 5 February 2023 at 18:00 WIB (UTC+7), 204,266,655 people had received the first dose of the vaccine and 175,131,893 people had been fully vaccinated; 69,597,474 of them had been inoculated with the booster or the third dose, while 1,585,164 had received the fourth dose. Jakarta has the highest percentage of population fully vaccinated with 103.46%, followed by Bali and Special Region of Yogyakarta with 85.45% and 83.02% respectively.\nDespite its compactness, the cumulative vaccination rate are not evenly distributed within DKI Jakarta. The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#install-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#install-packages",
    "title": "Take Home Exercise 2",
    "section": "Install Packages",
    "text": "Install Packages\n\npacman::p_load(sf, sfdep, tmap, maptools, tidyverse, Kendall, knitr, readxl, dplyr, plyr, plotly, zoo)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-prep",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#data-prep",
    "title": "Take Home Exercise 2",
    "section": "Data prep",
    "text": "Data prep\n\nGeospatial Data\nImport data\n\njkt <- st_read(dsn = \"data/geospatial\",\n               layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\nFilter and select\nFor the purpose of our study, we will only be keeping the first 9 fields in this dataframe.\n\njkt <- jkt[, 0:9]\n\nRename columns\n\njkt <- jkt %>% \n  dplyr::rename(\n    PROVINCE=PROVINSI, \n    CITY=KAB_KOTA, \n    DISTRICT=KECAMATAN, \n    VILLAGE_CODE=KODE_DESA, \n    VILLAGE=DESA, \n    SUBDISTRICT=DESA_KELUR,\n    CODE=KODE, \n    TOTALPOP=JUMLAH_PEN\n    )\n\n\nData Wrangling\nBefore we even start visualising our data, we have to first check for two things: invalid geometries and missing values, which could impact future calculations and representations.\nReference was taken from the senior sample submissions for the code for this section, with credit to Megan Sim’s Take-Home Exercise 1: Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia.\nCheck for the number of geometries that are not valid\n\n\nShow the code\nlength(which(st_is_valid(jkt) == FALSE))\n\n\n[1] 0\n\n\nCheck for missing values\n\n\nShow the code\njkt[rowSums(is.na(jkt))!=0,]\n\n\nSimple feature collection with 2 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.8412 ymin: -6.154036 xmax: 106.8612 ymax: -6.144973\nGeodetic CRS:  WGS 84\n    OBJECT_ID VILLAGE_CODE          VILLAGE   CODE    PROVINCE CITY DISTRICT\n243     25645     31888888     DANAU SUNTER 318888 DKI JAKARTA <NA>     <NA>\n244     25646     31888888 DANAU SUNTER DLL 318888 DKI JAKARTA <NA>     <NA>\n    SUBDISTRICT TOTALPOP                       geometry\n243        <NA>        0 MULTIPOLYGON (((106.8612 -6...\n244        <NA>        0 MULTIPOLYGON (((106.8504 -6...\n\n\nVerifying and transforming coordinate system\n\n\nCheck current CRS\nst_crs(jkt)\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\n\nTransform CRS\njkt <- st_transform(jkt, 23845)\n\n\n\n\nVerify transformation\nst_crs(jkt)\n\n\nCoordinate Reference System:\n  User input: EPSG:23845 \n  wkt:\nPROJCRS[\"DGN95 / Indonesia TM-3 zone 54.1\",\n    BASEGEOGCRS[\"DGN95\",\n        DATUM[\"Datum Geodesi Nasional 1995\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4755]],\n    CONVERSION[\"Indonesia TM-3 zone 54.1\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",139.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",200000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",1500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre.\"],\n        AREA[\"Indonesia - onshore east of 138°E.\"],\n        BBOX[-9.19,138,-1.49,141.01]],\n    ID[\"EPSG\",23845]]\n\n\nPlot the geometry\n\nplot(st_geometry(jkt))\n\n\n\n\nFrom the plot, we observe that the dataframe includes the outer islands in Jakarta.\nReferencing the senior’s findings, “CITY” is the column that we should be looking at to identify these islands as it is the higher level boundary.\nRemoval of Outer Islands\n\n\nCheck CITY types\nunique(jkt$\"CITY\")\n\n\n[1] \"JAKARTA BARAT\"    \"JAKARTA PUSAT\"    \"KEPULAUAN SERIBU\" \"JAKARTA UTARA\"   \n[5] \"JAKARTA TIMUR\"    \"JAKARTA SELATAN\"  NA                \n\n\n\n\nVisualising CITY to identify which returns the outer islands\ntm_shape(jkt) + \n  tm_polygons(\"CITY\")\n\n\n\n\n\nRemoving outer islands\nSelecting and keeping those that are NOT the outer islands\n\njkt <- filter(jkt, CITY != \"KEPULAUAN SERIBU\")\n\nPlot\n\ntm_shape(jkt) + \n  tm_polygons(\"CITY\")\n\n\n\n\n\n\n\nAspatial Data\nAs we have multiple excel files in our aspatial data, we will first have a look at what we are dealing with in these files. We’ll take a look at July 2021’s data.\n\njul2021 <- read_excel(\"data/aspatial/01 Juli 2021.xlsx\")\n\nglimpse(jul2021)\n\nRows: 268\nColumns: 21\n$ `KODE KELURAHAN`                             <chr> NA, \"3172051003\", \"317304…\n$ `WILAYAH KOTA`                               <chr> NA, \"JAKARTA UTARA\", \"JAK…\n$ KECAMATAN                                    <chr> NA, \"PADEMANGAN\", \"TAMBOR…\n$ KELURAHAN                                    <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\"…\n$ SASARAN                                      <dbl> 7739060, 20393, 25785, 25…\n$ `BELUM VAKSIN`                               <dbl> 5041111, 13272, 16477, 18…\n$ `JUMLAH\\r\\nDOSIS 1`                          <dbl> 2696017, 7114, 9299, 6301…\n$ `JUMLAH\\r\\nDOSIS 2`                          <dbl> 1181740, 3287, 3221, 2644…\n$ `TOTAL VAKSIN\\r\\nDIBERIKAN`                  <dbl> 3877757, 10401, 12520, 89…\n$ `LANSIA\\r\\nDOSIS 1`                          <dbl> 502873, 1297, 2003, 820, …\n$ `LANSIA\\r\\nDOSIS 2`                          <dbl> 449073, 1128, 1746, 703, …\n$ `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN`          <dbl> 951946, 2425, 3749, 1523,…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 1`                  <dbl> 2084559, 5672, 7121, 5170…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 2`                  <dbl> 655641, 2053, 1364, 1731,…\n$ `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN`   <dbl> 2740200, 7725, 8485, 6901…\n$ `GOTONG ROYONG\\r\\nDOSIS 1`                   <dbl> 35263, 44, 84, 103, 58, 7…\n$ `GOTONG ROYONG\\r\\nDOSIS 2`                   <dbl> 11624, 13, 31, 24, 18, 25…\n$ `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN`    <dbl> 46887, 57, 115, 127, 76, …\n$ `TENAGA KESEHATAN\\r\\nDOSIS 1`                <dbl> 73322, 101, 91, 208, 70, …\n$ `TENAGA KESEHATAN\\r\\nDOSIS 2`                <dbl> 65402, 93, 80, 186, 63, 3…\n$ `TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl> 138724, 194, 171, 394, 13…\n\n\n\njun2022 <- read_excel(\"data/aspatial/01 Juni 2022.xlsx\")\n\nglimpse(jun2022)\n\nRows: 268\nColumns: 34\n$ `KODE KELURAHAN`                             <chr> NA, \"3172051003\", \"317304…\n$ `WILAYAH KOTA`                               <chr> NA, \"JAKARTA UTARA\", \"JAK…\n$ KECAMATAN                                    <chr> NA, \"PADEMANGAN\", \"TAMBOR…\n$ KELURAHAN                                    <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\"…\n$ SASARAN                                      <dbl> 8941211, 23947, 29381, 29…\n$ `BELUM VAKSIN`                               <dbl> 1444901, 4440, 5083, 5671…\n$ `JUMLAH\\r\\nDOSIS 1`                          <dbl> 7496310, 19507, 24298, 23…\n$ `JUMLAH\\r\\nDOSIS 2`                          <dbl> 6744379, 17077, 21186, 20…\n$ `JUMLAH\\r\\nDOSIS 3`                          <dbl> 2894577, 7041, 9520, 7055…\n$ `TOTAL VAKSIN\\r\\nDIBERIKAN`                  <dbl> 17135266, 43625, 55004, 5…\n$ `LANSIA\\r\\nDOSIS 1`                          <dbl> 652454, 1580, 2482, 1463,…\n$ `LANSIA\\r\\nDOSIS 2`                          <dbl> 614306, 1442, 2367, 1378,…\n$ `LANSIA\\r\\nDOSIS 3`                          <dbl> 614306, 1442, 2367, 1378,…\n$ `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN`          <dbl> 1616341, 3806, 6393, 3470…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 1`                  <dbl> 1483935, 3982, 3921, 4612…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 2`                  <dbl> 1379628, 3645, 3535, 4192…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 3`                  <dbl> 397185, 1188, 1190, 1040,…\n$ `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN`   <dbl> 3260748, 8815, 8646, 9844…\n$ `GOTONG ROYONG\\r\\nDOSIS 1`                   <dbl> 88237, 179, 178, 262, 102…\n$ `GOTONG ROYONG\\r\\nDOSIS 2`                   <dbl> 86236, 173, 179, 260, 99,…\n$ `GOTONG ROYONG\\r\\nDOSIS 3`                   <dbl> 43638, 101, 112, 132, 54,…\n$ `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN`    <dbl> 218111, 453, 469, 654, 25…\n$ `TENAGA KESEHATAN\\r\\nDOSIS 1`                <dbl> 115665, 140, 135, 348, 12…\n$ `TENAGA KESEHATAN\\r\\nDOSIS 2`                <dbl> 112332, 130, 131, 333, 12…\n$ `TENAGA KESEHATAN\\r\\nDOSIS 3`                <dbl> 91122, 111, 108, 263, 93,…\n$ `TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl> 319119, 381, 374, 944, 33…\n$ `TAHAPAN 3\\r\\nDOSIS 1`                       <dbl> 4288318, 11318, 14850, 13…\n$ `TAHAPAN 3\\r\\nDOSIS 2`                       <dbl> 3764246, 9632, 12580, 116…\n$ `TAHAPAN 3\\r\\nDOSIS 3`                       <dbl> 1982005, 4789, 6475, 4910…\n$ `TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN`        <dbl> 10034569, 25739, 33905, 3…\n$ `REMAJA\\r\\nDOSIS 1`                          <dbl> 867701, 2308, 2732, 2858,…\n$ `REMAJA\\r\\nDOSIS 2`                          <dbl> 787631, 2055, 2394, 2562,…\n$ `REMAJA\\r\\nDOSIS 3`                          <dbl> 31046, 68, 91, 81, 26, 82…\n$ `REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN`           <dbl> 1686378, 4431, 5217, 5501…\n\n\nWe observe that the number of columns in our aspatial dataset differs. To find out which columns are not present in the other:\n\nsetdiff(colnames(jun2022), colnames(jul2021))\n\n [1] \"JUMLAH\\r\\nDOSIS 3\"                   \"LANSIA\\r\\nDOSIS 3\"                  \n [3] \"PELAYAN PUBLIK\\r\\nDOSIS 3\"           \"GOTONG ROYONG\\r\\nDOSIS 3\"           \n [5] \"TENAGA KESEHATAN\\r\\nDOSIS 3\"         \"TAHAPAN 3\\r\\nDOSIS 1\"               \n [7] \"TAHAPAN 3\\r\\nDOSIS 2\"                \"TAHAPAN 3\\r\\nDOSIS 3\"               \n [9] \"TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN\" \"REMAJA\\r\\nDOSIS 1\"                  \n[11] \"REMAJA\\r\\nDOSIS 2\"                   \"REMAJA\\r\\nDOSIS 3\"                  \n[13] \"REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN\"   \n\n\n\nsetdiff(colnames(jul2021), colnames(jun2022))\n\ncharacter(0)\n\n\nSeems like the extra/missing columns are not a cause for concern as we will not be using them anyway.\nUnderstanding columns\n\n\n\n\n\n\nColumn Meanings\n\n\n\n\n\n-   Kode Kelurahan: sub-district code\n\n-   WILAYAH KOTA: City area\n\n-   KECAMATAN: Sub district\n\n-   KELURAHAN: Ward\n\n-   SASARAN: target\n\n-   BELUM VAKSIN: Yet to be vaccinated\n\n-   JUMLAH\\\\r\\\\nDOSIS 1: Total dosage 1\n\n-   TOTAL VAKSIN\\\\r\\\\nDIBERIKAN: Total vaccine granted\n\n-   LANSIA\\\\r\\\\nDOSIS 1: Elderly dose 1\n\n-   PELAYAN PUBLIK\\\\r\\\\nDOSIS 1: Public servant dosage 1\n\n-   TENAGA KESEHATAN\\\\r\\\\nDOSIS 1: Health personnel dosage 1\n\n-   TENAGA KESEHATAN TOTAL\\\\r\\\\nVAKSIN DIBERIKAN: TOTAL HEALTH PERSONNEL - VACCINES WERE GIVEN\n\n\n\nFor the purpose of this assignment, we will only focus on the overall vaccine administration, not specific to elderly, teenagers, public workers etc. We should focus on Target and Yet to be Vaccinated instead of Population. We will not use total number of vaccination given (i.e. TOTAL VAKSIN VIBERIE).\nWe will need to select our columns of interest, rename them and create a date column for our dataset. We can do this for all files by creating a function for preprocessing.\n\nCreating the Date Column\nAs I had previously renamed the aspatial file names to just their dates.xlsx, we only need to exclude the extension from the file name.\nReference for basename(): https://stackoverflow.com/questions/2548815/find-file-name-from-full-file-path\n\naspatial_preprocess <- function(filepath){\n  result_file <- read_xlsx(filepath, .name_repair = \"minimal\")\n  get_date_from_name <- basename(filepath)\n  date <- substring(get_date_from_name, 1, nchar(get_date_from_name)-5)\n  result_file$Date <- date\n  return(result_file)\n}\n\nAdding on code to select necessary columns:\n\naspatial_preprocess <- function(filepath){\n    result_file <- read_xlsx(filepath, .name_repair = \"minimal\")\n  get_date_from_name <- basename(filepath)\n  date <- substring(get_date_from_name, 1, nchar(get_date_from_name)-5)\n  result_file$Date <- date\n  \n  result_file <- result_file %>% \n    select(\"Date\", c(0:10))\n  \n  return(result_file)\n  }\n\nApply to all files:\n\n# Get all file names with fll path (full.name = TRUE)\nfileslist <-list.files(path = \"data/aspatial\", pattern = \"*.xlsx\", full.names=TRUE)\n\n# afterwards, for every element in fileslist, apply aspatial_process function\ndflist <- lapply(seq_along(fileslist), function(x) aspatial_preprocess(fileslist[x]))\n\nConvert the dflist into an actual dataframe with ldply():\n\nvaccinations <- ldply(dflist, data.frame)\nglimpse(vaccinations)\n\nRows: 3,216\nColumns: 12\n$ Date                    <chr> \"01 Agustus 2021\", \"01 Agustus 2021\", \"01 Agus…\n$ KODE.KELURAHAN          <chr> NA, \"3172051003\", \"3173041007\", \"3175041005\", …\n$ WILAYAH.KOTA            <chr> NA, \"JAKARTA UTARA\", \"JAKARTA BARAT\", \"JAKARTA…\n$ KECAMATAN               <chr> NA, \"PADEMANGAN\", \"TAMBORA\", \"KRAMAT JATI\", \"J…\n$ KELURAHAN               <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\", \"BALE KAMBANG\", \"BA…\n$ SASARAN                 <dbl> 8941211, 23947, 29381, 29074, 9752, 26285, 215…\n$ BELUM.VAKSIN            <dbl> 4399496, 12155, 13727, 18226, 4987, 13716, 102…\n$ JUMLAH..DOSIS.1         <dbl> 4541715, 11792, 15654, 10848, 4765, 12569, 113…\n$ JUMLAH..DOSIS.2         <dbl> 1686820, 4268, 4905, 3712, 2036, 5242, 4089, 6…\n$ TOTAL.VAKSIN..DIBERIKAN <dbl> 6228535, 16060, 20559, 14560, 6801, 17811, 154…\n$ LANSIA..DOSIS.1         <dbl> 503443, 1230, 2014, 866, 857, 1339, 1138, 1019…\n$ JUMLAH..DOSIS.3         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n\nFormatting Date Column\nSince the values in the Date column were derived from substrings, they’re naturally in string format. We should convert that into datetime, keeping in mind that the values in Date are in Bahasa Indonesia\n\n# parses the 'Date' column into Month(Full Name)-YYYY datetime objects\n# reference: https://stackoverflow.com/questions/53380650/b-y-date-conversion-gives-na\n\n# locale=\"ind\" means that the locale has been set as Indonesia\nSys.setlocale(locale=\"ind\")\n\n[1] \"LC_COLLATE=Indonesian_Indonesia.1252;LC_CTYPE=Indonesian_Indonesia.1252;LC_MONETARY=Indonesian_Indonesia.1252;LC_NUMERIC=C;LC_TIME=Indonesian_Indonesia.1252\"\n\n\n\nvaccinations$Date <- c(vaccinations$Date) %>% \n  as.Date(vaccinations$Date, format =\"%d %B %Y\")\n\nglimpse(vaccinations)\n\nRows: 3,216\nColumns: 12\n$ Date                    <date> 2021-08-01, 2021-08-01, 2021-08-01, 2021-08-0~\n$ KODE.KELURAHAN          <chr> NA, \"3172051003\", \"3173041007\", \"3175041005\", ~\n$ WILAYAH.KOTA            <chr> NA, \"JAKARTA UTARA\", \"JAKARTA BARAT\", \"JAKARTA~\n$ KECAMATAN               <chr> NA, \"PADEMANGAN\", \"TAMBORA\", \"KRAMAT JATI\", \"J~\n$ KELURAHAN               <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\", \"BALE KAMBANG\", \"BA~\n$ SASARAN                 <dbl> 8941211, 23947, 29381, 29074, 9752, 26285, 215~\n$ BELUM.VAKSIN            <dbl> 4399496, 12155, 13727, 18226, 4987, 13716, 102~\n$ JUMLAH..DOSIS.1         <dbl> 4541715, 11792, 15654, 10848, 4765, 12569, 113~\n$ JUMLAH..DOSIS.2         <dbl> 1686820, 4268, 4905, 3712, 2036, 5242, 4089, 6~\n$ TOTAL.VAKSIN..DIBERIKAN <dbl> 6228535, 16060, 20559, 14560, 6801, 17811, 154~\n$ LANSIA..DOSIS.1         <dbl> 503443, 1230, 2014, 866, 857, 1339, 1138, 1019~\n$ JUMLAH..DOSIS.3         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA~\n\n\n\n\nRemove Unwanted Columns\nReference: https://sparkbyexamples.com/r-programming/remove-column-in-r/\n\nvaccinations <- vaccinations %>% select(-c(LANSIA..DOSIS.1, TOTAL.VAKSIN..DIBERIKAN, JUMLAH..DOSIS.3))\n\n\n\nRenaming columns to English version\n\nvaccinations <- vaccinations %>% \n  dplyr::rename(\n    Date=Date,\n    Code=KODE.KELURAHAN, \n    City=WILAYAH.KOTA, \n    District=KECAMATAN, \n    Sub_District=KELURAHAN,\n    Target=SASARAN, \n    Yet_to_be_vaccinated=BELUM.VAKSIN,\n    Total_Dosage1=JUMLAH..DOSIS.1,\n    Total_Dosage2=JUMLAH..DOSIS.2\n    )\n\n\nglimpse(vaccinations)\n\nRows: 3,216\nColumns: 9\n$ Date                 <date> 2021-08-01, 2021-08-01, 2021-08-01, 2021-08-01, ~\n$ Code                 <chr> NA, \"3172051003\", \"3173041007\", \"3175041005\", \"31~\n$ City                 <chr> NA, \"JAKARTA UTARA\", \"JAKARTA BARAT\", \"JAKARTA TI~\n$ District             <chr> NA, \"PADEMANGAN\", \"TAMBORA\", \"KRAMAT JATI\", \"JATI~\n$ Sub_District         <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\", \"BALE KAMBANG\", \"BALI ~\n$ Target               <dbl> 8941211, 23947, 29381, 29074, 9752, 26285, 21566,~\n$ Yet_to_be_vaccinated <dbl> 4399496, 12155, 13727, 18226, 4987, 13716, 10232,~\n$ Total_Dosage1        <dbl> 4541715, 11792, 15654, 10848, 4765, 12569, 11334,~\n$ Total_Dosage2        <dbl> 1686820, 4268, 4905, 3712, 2036, 5242, 4089, 6150~\n\n\n\n\nEnsure we select only our study area\n\nvaccinations <- vaccinations %>% filter(`City` %in% c('JAKARTA BARAT',\n                                                      'JAKARTA PUSAT',\n                                                      'JAKARTA SELATAN',\n                                                      'JAKARTA TIMUR',\n                                                      'JAKARTA UTARA'))\n\n\n\n\nCombine Geospatial and Aspatial Data\n\nvaccinations_jkt <- left_join(jkt, vaccinations, by = c(\"CITY\" = \"City\",\n                                                        \"SUBDISTRICT\"=\"Sub_District\",\n                                                        \"DISTRICT\"=\"District\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#dealing-with-missing-values",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#dealing-with-missing-values",
    "title": "Take Home Exercise 2",
    "section": "Dealing with Missing Values",
    "text": "Dealing with Missing Values\nReference: https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/#identifying-mismatched-sub-district-records\n\n# checks for unique values of Sub_District in cases_jakarta that aren't already present in jkt and vice versa\nvax_subdistrict <- c(vaccinations$Sub_District)\njkt_subdistrict <- c(jkt$SUBDISTRICT)\n\nunique(vax_subdistrict[!(vax_subdistrict %in% jkt_subdistrict)])\n\n[1] \"BALE KAMBANG\"          \"HALIM PERDANA KUSUMAH\" \"JATI PULO\"            \n[4] \"KAMPUNG TENGAH\"        \"KERENDANG\"             \"KRAMAT JATI\"          \n[7] \"PAL MERIAM\"            \"PINANG RANTI\"          \"RAWA JATI\"            \n\n\n\nunique(jkt_subdistrict[!(jkt_subdistrict %in% vax_subdistrict)])\n\n[1] \"KRENDANG\"             \"RAWAJATI\"             \"TENGAH\"              \n[4] \"BALEKAMBANG\"          \"PINANGRANTI\"          \"JATIPULO\"            \n[7] \"PALMERIAM\"            \"KRAMATJATI\"           \"HALIM PERDANA KUSUMA\"\n\n\n\nCorrecting mismatched values\n\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'BALEKAMBANG'] <- 'BALE KAMBANG'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'HALIM PERDANA KUSUMA'] <- 'HALIM PERDANA KUSUMAH'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'JATIPULO'] <- 'JATI PULO'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'TENGAH'] <- 'KAMPUNG TENGAH'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'KRAMATJATI'] <- 'KRAMAT JATI'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'KRENDANG'] <- 'KERENDANG'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'PALMERIAM'] <- 'PAL MERIAM'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'PINANGRANTI'] <- 'PINANG RANTI'\njkt$SUBDISTRICT[jkt$SUBDISTRICT == 'RAWAJATI'] <- 'RAWA JATI'\n\n\nvaccinations_jkt <- left_join(jkt, vaccinations, by = c(\"SUBDISTRICT\"=\"Sub_District\"))\n\n\n\nCode to visualise new combined dataset\ntm_shape(vaccinations_jkt) + \n  tm_polygons(\"Total_Dosage1\") +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"left\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-monthly-vaccination-rate",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-monthly-vaccination-rate",
    "title": "Take Home Exercise 2",
    "section": "Computing Monthly Vaccination Rate",
    "text": "Computing Monthly Vaccination Rate\nMonthly vaccination rate = (Sum per month of) Total number of vaccinations / Total population\nReference: https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/#cumulative-confirmed-cases-rate\n\n\n\n\n\n\nOld code for my reference\n\n\n\n\n\n(Please ignore this)\n\n# grouping based on the sub-district and date\nvaccinations_jkt <- vaccinations_jkt %>%\n  group_by(SUBDISTRICT, Date) %>%\n  dplyr::mutate(`Dose1_Rate` = ((sum(Total_Dosage1)/(TOTALPOP))*100))\n\n\n\n\n\nvaccination_rate <- vaccinations %>%\n  inner_join(jkt, by=c(\"Sub_District\" = \"SUBDISTRICT\")) %>%\n  group_by(Sub_District, Date) %>%\n  dplyr::summarise(`Dose1_Rate` = ((sum(Total_Dosage1)/(TOTALPOP))*100)) %>%\n  ungroup() %>% pivot_wider(names_from = Date,\n              values_from = Dose1_Rate)\n\n\nvaccinations_jkt <- st_as_sf(vaccinations_jkt)\nvaccination_rate <- vaccination_rate %>% left_join(jkt, by=c(\"Sub_District\" = \"SUBDISTRICT\"))\nvaccination_rate <- st_as_sf(vaccination_rate)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plotting-our-choropleth-map",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#plotting-our-choropleth-map",
    "title": "Take Home Exercise 2",
    "section": "Plotting our Choropleth Map",
    "text": "Plotting our Choropleth Map\n\njenks_plot <- function(df, varname) {\n  tm_shape(vaccination_rate) +\n    tm_polygons() +\n  tm_shape(df) +\n    tm_fill(varname, \n          n= 6,\n          style = \"jenks\", \n          title = \"Vaccination Rate\") +\n    tm_layout(main.title = varname,\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.5)\n}\n\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(vaccination_rate, \"2021-07-01\"),\n             jenks_plot(vaccination_rate, \"2021-08-01\"),\n             jenks_plot(vaccination_rate, \"2021-09-01\"),\n             jenks_plot(vaccination_rate, \"2021-10-01\"),\n             jenks_plot(vaccination_rate, \"2021-11-01\"),\n             jenks_plot(vaccination_rate, \"2021-12-01\"),\n             jenks_plot(vaccination_rate, \"2022-01-01\"),\n             jenks_plot(vaccination_rate, \"2022-02-01\"),\n             jenks_plot(vaccination_rate, \"2022-03-02\"),\n             jenks_plot(vaccination_rate, \"2022-04-01\"),\n             jenks_plot(vaccination_rate, \"2022-05-01\"),\n             jenks_plot(vaccination_rate, \"2022-06-01\"))\n\n\n\n\n\n\n\n\n\n\nOld code for my reference\n\n\n\n\n\n(Please ignore this)\ntm_shape(vaccination_rate) + tm_fill(“Dose1_Rate”, palette = “Blues”, style=“quantile”) + tm_facets(by=“Date”) + tm_borders(alpha = 0.5)+ tm_layout(legend.outside = TRUE, legend.outside.position = “left”)\n\n\n\n\n\n\n\n\n\nAnalysis\n\n\n\nWe can see that the overall vaccination rate for the first dose increases over the years, with a relatively sharper increase from October to November 2021.\nMore people in the northern portion of Jakarta got their first dose of vaccines earlier. On the other hand, those in the southern part of Jakarta, though getting their vaccinations slightly later, have a higher vaccination rate."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-function-to-get-gi-for-all-months",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-function-to-get-gi-for-all-months",
    "title": "Take Home Exercise 2",
    "section": "Create function to get Gi for all months",
    "text": "Create function to get Gi for all months\n\nget_gi <- function(period){\n  set.seed(1234)\n  HCSA <- wm_idw\n  HCSA <- wm_idw %>%\n    mutate(local_gi = local_gstar_perm(\n      HCSA[[period]],\n      nb,\n      wt,\n      nsim = 99\n    ),\n    .before = 1) %>%\n    unnest(local_gi)\n  \n  significant_HCSA <- HCSA %>%\n    filter(p_sim < 0.05)\n  \n  tmap_mode(\"plot\")\n  tm_shape(HCSA) + \n    tm_polygons() + \n    tm_borders(alpha = 0.5) + \n    tm_shape(significant_HCSA) + \n    tm_fill(\"gi_star\",\n            palette = \"Blues\") + \n    tm_borders(alpha = 0.4) + \n    tm_layout(main.title = period,\n              main.title.size = 0.8)\n}\n\n\ntmap_arrange(get_gi(\"2021-07-01\"),\n             get_gi(\"2021-08-01\"),\n             get_gi(\"2021-09-01\"),\n             get_gi(\"2021-10-01\"),\n             get_gi(\"2021-11-01\"),\n             get_gi(\"2021-12-01\"),\n             get_gi(\"2022-01-01\"),\n             get_gi(\"2022-02-01\"),\n             get_gi(\"2022-03-02\"),\n             get_gi(\"2022-04-01\"),\n             get_gi(\"2022-05-01\"),\n             get_gi(\"2022-06-01\"))\n\n\n\n\n\n\n\n\n\n\nFindings\n\n\n\nOvertime, clusters form at the south of Jakarta and remained a hot spot.\nThere seems to be a consistent cluster at the southwest and central regions of Jakarta. The cool clusters at the centre and northwest of Jakarta seems to be consistent. The government may want to focus and increase vaccination rates in those areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-time-series-cube",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-time-series-cube",
    "title": "Take Home Exercise 2",
    "section": "Create Time Series Cube",
    "text": "Create Time Series Cube\n\n\n\n\n\n\nCodes that don’t work\n\n\n\n\n\n(Please ignore this)\n\n#vaccinations_jkt <- vaccinations_jkt %>%\n#  group_by(SUBDISTRICT, Date) %>%\n#  dplyr::summarise(`Dose1_Rate` = ((sum(Total_Dosage1)/(TOTALPOP))*100))\n\n\n#ungroup(vaccinations$SUBDISTRICT)\n\n\n#vaccination_rate_nb <- vaccination_rate_st %>%\n#  activate(\"geometry\") %>%\n#  mutate(nb = include_self(st_contiguity(geometry)),\n#         wt = st_inverse_distance(nb, geometry,\n#                                  scale = 1,\n#                                  alpha = 1),\n#         .before = 1) %>%\n#  set_nbs(\"nb\") %>%\n#  set_wts(\"wt\")\n\n#head(vaccination_rate_nb)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-space-time-cubes",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-space-time-cubes",
    "title": "Take Home Exercise 2",
    "section": "Create space time cubes",
    "text": "Create space time cubes\n\nvaccinations_jkt$Dose1_Rate <- ((vaccinations_jkt$Total_Dosage1)/(vaccinations_jkt$TOTALPOP))*100\n\n\nvaccination_rate_st <- spacetime(vaccinations_jkt, \n                       jkt, \n                      .loc_col = \"SUBDISTRICT\", \n                      .time_col = \"Date\")\n\n\n\nCheck if space time cube\n is_spacetime_cube(vaccination_rate_st)\n\n\n[1] TRUE\n\n\n\n#vaccination_rate_nb <- vaccination_rate_st %>%\n#  activate(\"geometry\") %>%\n#  mutate(nb = include_self(st_contiguity(geometry)),\n#         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n#         .before = 1) %>%\n#  set_nbs(\"nb\") %>%\n#  set_wts(\"wt\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#compute-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#compute-gi",
    "title": "Take Home Exercise 2",
    "section": "Compute Gi*",
    "text": "Compute Gi*\n\n#gi_stars <- vaccination_rate_nb %>% \n#  group_by(Date) %>% \n#  mutate(gi_star = local_gstar_perm(\n#    Vaccination_Rate, nb, wt)) %>% \n#  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "title": "Take Home Exercise 2",
    "section": "Mann-Kendall Test",
    "text": "Mann-Kendall Test\n\nVisualise EHSA Classes"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/data/geospatial/MPSZ-2019.html",
    "href": "Take-home_Ex/Take-home_Ex03/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#transform-crs-and-check",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#transform-crs-and-check",
    "title": "Take-home_Ex03",
    "section": "2.3 Transform CRS and check",
    "text": "2.3 Transform CRS and check\nRead RDS\n\nrs_coords <- read_rds(\"data/aspatial/rds/rs_coords.rds\")\n\nSince the coordinates are in decimal degrees, the projected CRS will be WSG84.\nWe will hence need to assign it as CRS 4326 before transforming it to 3414 which is the EPSG code for SVY21.\n\nconvert data frame into sf object\ntransform the coordinates of the sf object\n\n\nrs_coords_sf <- st_as_sf(rs_coords, \n                         coords = c(\"longitude\", \n                                    \"latitude\"),\n                         crs = 4326) %>%\n  st_transform(crs = 3414)\n\nCheck EPSG\n\nst_crs(rs_coords_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n2.3.1 Check for invalid geometries\n\nlength(which(st_is_valid(rs_coords_sf) == FALSE))\n\n[1] 0\n\n\n\ntmap_mode(\"view\")\ntm_shape(rs_coords_sf)+\n  tm_dots(col=\"blue\", size = 0.02)\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#locational-factors-with-coordinates",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#locational-factors-with-coordinates",
    "title": "Take-home_Ex03",
    "section": "3.1 Locational Factors with Coordinates",
    "text": "3.1 Locational Factors with Coordinates\n\nChildcare data in geojson format.\nEldercare data in shapefile format.\nHawker centre data in geojson format.\nParks data in kml format.\nMRT stations data in shapefile format.\nSupermarkets data in geojson format.\n\n\nelder_sf <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\")\n\nReading layer `ELDERCARE' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n\nmrt_sf <- st_read(dsn = \"data/geospatial\", layer = \"Train_station_Exit_Layer\")\n\nReading layer `Train_station_Exit_Layer' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 562 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6134.086 ymin: 27499.7 xmax: 45356.36 ymax: 47865.92\nProjected CRS: SVY21\n\nbus_sf <- st_read(dsn = \"data/geospatial\", layer = \"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\nchildcare_sf<- st_read(\"data/geospatial/child-care-services-geojson.geojson\")\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nhawker_sf <- st_read(\"data/geospatial/hawker-centres-geojson.geojson\")\n\nReading layer `hawker-centres-geojson' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\hawker-centres-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449217\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nsupermarkets_sf <- st_read(\"data/geospatial/supermarkets-geojson.geojson\")\n\nReading layer `supermarkets-geojson' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\supermarkets-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nparks_sf <- st_read(\"data/geospatial/parks.kml\")\n\nReading layer `NATIONALPARKS_New' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial\\parks.kml' \n  using driver `KML'\nSimple feature collection with 421 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(elder_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(mrt_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(bus_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(hawker_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(supermarkets_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\nst_crs(parks_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\nTrain_station_Exit_Layer and ELDERCARE have their projected CRS as SVY21, which is EPSG 9001.\nChildcare, hawker centres, supermarkets, national parks have their projected CRS as WGS84, which is EPSG 4326.\nHence, we will need to convert the EPSG to 3414 for these datasets.\n\n\nelder_sf <- st_set_crs(elder_sf, 3414)\nmrt_sf <- st_set_crs(mrt_sf, 3414)\nbus_sf <- st_set_crs(bus_sf, 3414)\n\nhawker_sf <- hawker_sf %>%\n  st_transform(crs = 3414)\nparks_sf <- parks_sf %>%\n  st_transform(crs = 3414)\nsupermarkets_sf <- supermarkets_sf %>%\n  st_transform(crs = 3414)\nchildcare_sf <- childcare_sf %>%\n  st_transform(crs = 3414)\n\n\n3.1.1 Check for invalid geometries\n\nlength(which(st_is_valid(elder_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(mrt_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(bus_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(hawker_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(parks_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(supermarkets_sf) == FALSE))\n\n[1] 0\n\nlength(which(st_is_valid(childcare_sf) == FALSE))\n\n[1] 0\n\n\n\n\n3.1.2 Proximity function\n\n3.1.2.1 Create get proximity function\nThe following code chunk performs 3 steps:\n\nIt will create a matrix of distances between the HDB and the locational factor using st_distance of sf package.\nIt will also get the nearest point of the locational factor by looking at the minimum distance using min function of base R package then add it to HDB resale data under a new column using mutate() function of dpylr package. (Find the nearest location to that HDB, calculate proximity and add to column)\nLastly, it will rename the column name according to input given by user so that the columns have appropriate and distinct names that are different from one another.\n\n\nget_prox <- function(origin_df, dest_df, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)           \n  \n  # find the nearest location_factor and create new data frame\n  near <- origin_df %>% \n    mutate(PROX = apply(dist_matrix, 1, function(x) min(x)) / 1000) \n  \n  # rename column name according to input parameter\n  names(near)[names(near) == 'PROX'] <- col_name\n\n  # Return df\n  return(near)\n}\n\n\n\n3.1.2.2 Find proximity\n\nrs_coords_sf <- get_prox(rs_coords_sf, elder_sf, \"PROX_ELDERLYCARE\") \nrs_coords_sf <- get_prox(rs_coords_sf, mrt_sf, \"PROX_MRT\") \nrs_coords_sf <- get_prox(rs_coords_sf, hawker_sf, \"PROX_HAWKER\") \nrs_coords_sf <- get_prox(rs_coords_sf, parks_sf, \"PROX_PARK\") \nrs_coords_sf <- get_prox(rs_coords_sf, supermarkets_sf, \"PROX_SUPERMARKET\")\n\n\n\n\n3.1.3 get_within function to calculate no. of factors within distance\nThe following code chunk performs 3 steps:\n\nIt will create a matrix of distances between the HDB and the locational factor using st_distance of sf package.\nIt will also get the sum of points of the locational factor that are within the threshold distance using sum function of base R package then add it to HDB resale data under a new column using mutate() function of dpylr package.\nLastly, it will rename the column name according to input given by user so that the columns have appropriate and distinct names that are different from one another.\n\n\nget_within <- function(origin_df, dest_df, threshold_dist, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  wdist <- origin_df %>% \n    mutate(WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist)))\n  \n  # rename column name according to input parameter\n  names(wdist)[names(wdist) == 'WITHIN_DT'] <- col_name\n\n  # Return df\n  return(wdist)\n}\n\n\n3.1.3.1 Call get_within function\n\nHere, we call the get_within function created earlier to get the number of locational factors that are within a certain threshold distance.\nIn this case, the threshold we set it to will be Within 350m for childcare centres and bus stops.\n\n\nrs_coords_sf <- get_within(rs_coords_sf, childcare_sf, 350, \"WITHIN_350M_CHILDCARE\")\n\n\nrs_coords_sf <- get_within(rs_coords_sf, bus_sf, 350, \"WITHIN_350M_BUS\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#proximity-function",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#proximity-function",
    "title": "Take-home_Ex03",
    "section": "3.2 Proximity function",
    "text": "3.2 Proximity function\n\n3.2.1 Create get proximity function\nThe following code chunk performs 3 steps:\n\nIt will create a matrix of distances between the HDB and the locational factor using st_distance of sf package.\nIt will also get the nearest point of the locational factor by looking at the minimum distance using min function of base R package then add it to HDB resale data under a new column using mutate() function of dpylr package. (Find the nearest location to that HDB, calculate proximity and add to column)\nLastly, it will rename the column name according to input given by user so that the columns have appropriate and distinct names that are different from one another.\n\n\nget_prox <- function(origin_df, dest_df, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)           \n  \n  # find the nearest location_factor and create new data frame\n  near <- origin_df %>% \n    mutate(PROX = apply(dist_matrix, 1, function(x) min(x)) / 1000) \n  \n  # rename column name according to input parameter\n  names(near)[names(near) == 'PROX'] <- col_name\n\n  # Return df\n  return(near)\n}\n\n\n\n3.2.2 Find proximity\n\nrs_coords_sf <- get_prox(rs_coords_sf, elder_sf, \"PROX_ELDERLYCARE\") \nrs_coords_sf <- get_prox(rs_coords_sf, mrt_sf, \"PROX_MRT\") \nrs_coords_sf <- get_prox(rs_coords_sf, hawker_sf, \"PROX_HAWKER\") \nrs_coords_sf <- get_prox(rs_coords_sf, parks_sf, \"PROX_PARK\") \nrs_coords_sf <- get_prox(rs_coords_sf, supermarkets_sf, \"PROX_SUPERMARKET\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html",
    "title": "In Class Exercise 10: Modeling Geographical Accessibility",
    "section": "",
    "text": "For fca package: rows: destination, col: origin\nFor SpatialAcc package: rows: origin, col: destination\n\npacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse)\n\npackage 'dplyr' successfully unpacked and MD5 sums checked\npackage 'ggstatsplot' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Asus\\AppData\\Local\\Temp\\RtmpAd4NNe\\downloaded_packages\n\n\n\n\n\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\zoe-chia\\IS415\\In-class_Ex\\In-class_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n\nReading layer `hexagons' from data source \n  `C:\\zoe-chia\\IS415\\In-class_Ex\\In-class_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\n\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n\nReading layer `ELDERCARE' from data source \n  `C:\\zoe-chia\\IS415\\In-class_Ex\\In-class_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n\nTo ensure things are consistent\n\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  rename(destination_id = fid, # rename fid to destination_id\n         postal_code = ADDRESSPOS) %>% # rename ADDRESSPOS to postal_code\n  mutate(capacity = 100) # create a new column for capacity and indicate as 100\n\n\nhexagons <- hexagons %>%\n  select(fid) %>%\n  rename(origin_id = fid) %>%\n  mutate(demand = 100)\n\nIn practice, the actual demand of the hexagon and capacity of the eldercare centre should be used."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#visualising-hansens-accessibilty",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#visualising-hansens-accessibilty",
    "title": "In Class Exercise 10: Modeling Geographical Accessibility",
    "section": "3.1 Visualising Hansen’s accessibilty",
    "text": "3.1 Visualising Hansen’s accessibilty\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#statistical-graphic-visualisation",
    "href": "In-class_Ex/In-class_Ex09/In-class_Ex09.html#statistical-graphic-visualisation",
    "title": "In Class Exercise 10: Modeling Geographical Accessibility",
    "section": "3.2 Statistical graphic visualisation",
    "text": "3.2 Statistical graphic visualisation\n\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n\n\nggplot(data=hexagon_Hansen, \n       aes(y = log(accHansen), \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#locational-factors-without-coordinates",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#locational-factors-without-coordinates",
    "title": "Take-home_Ex03",
    "section": "3.2 Locational factors without coordinates",
    "text": "3.2 Locational factors without coordinates\nIn this section we retrieve those locational factors that are not available on government websites or does not have geographic coordinates.\n\n3.2.1 CBD\n\nFrom findlatitudeandlongitude.com, the coordinates for the CBD are (1.352083, 103.819836)\nWe then have to convert the latitude and longitude of the CBD area to EPSG 3414 format before running the get_prox function.\nFirst, we have to create a df consisting of latitude and longitude coordinates of the CBD area then transform it.\n\n\n3.2.1.1 Store CBD in dataframe\n\nname <- c('CBD Area')\nlatitude= c(1.352083)\nlongitude= c(103.819836)\ncbd_coords <- data.frame(name, latitude, longitude)\n\n\n\n3.2.1.2 Assign and transform CRS\n\ncbd_coords_sf <- st_as_sf(cbd_coords,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nst_crs(cbd_coords_sf)\n\n\n\n3.2.1.3 Call get_prox function\nWe call the get_prox function to get the proximity of HDBs to the CBD area.\n\nrs_coords_sf <- get_prox(rs_coords_sf, cbd_coords_sf, \"PROX_CBD\") \n\n\n\n\n3.2.2 Shopping Malls\nAs there are currently no available datasets that we can download for Shopping Malls in Singapore, an alternative would be to extract the Shopping Mall names from Wikipedia and then get the respective coordinates with our get_coords function before computing the proximity.\n\n3.2.2.1 Extract Shopping Malls from Wikipedia\n\nurl <- \"https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore\"\nmalls_list <- list()\n\nfor (i in 2:7){\n  malls <- read_html(url) %>%\n    html_nodes(xpath = paste('//*[@id=\"mw-content-text\"]/div[1]/div[',as.character(i),']/ul/li',sep=\"\") ) %>%\n    html_text()\n  malls_list <- append(malls_list, malls)\n}\n\n\n\n3.2.2.2 Call get_coords function\n\nmalls_list_coords <- get_coords(malls_list) %>% \n  rename(\"mall_name\" = \"address\")\n\n\nmalls_list_coords[(is.na(malls_list_coords$postal) | is.na(malls_list_coords$latitude) | is.na(malls_list_coords$longitude) | malls_list_coords$postal==\"NIL\"), ]\n\n\n\n\n3.2.2.3 Correcting invalid malls\nFrom the results above, we have to change the names of these malls as some of them have other information such as:\n\n(formerly OneKM)\nnumber annotation from Wikipedia\nchange in mall names like OD Mall is now The Grandstand\n\n\ninvalid_malls<- subset(malls_list_coords, is.na(malls_list_coords$postal))\ninvalid_malls_list <- unique(invalid_malls$mall_name)\ncorrected_malls <- c(\"KINEX\", \"Katong Square\", \"PLQ Mall\", \"Roxy Square\", \"City Plaza\", \"GR.ID\", \"Elias Mall\",\n                     \"Loyang Point\", \"888 Plaza\", \"The Grandstand\")\n\nfor (i in 1:length(invalid_malls_list)) {\n  malls_list_coords <- malls_list_coords %>% \n    mutate(mall_name = ifelse(as.character(mall_name) == invalid_malls_list[i], corrected_malls[i], as.character(mall_name)))\n}\n\nCreate a list storing unique mall names\n\nmalls_list <- sort(unique(malls_list_coords$mall_name))\n\nCall get_coords to retrieve coordinates of shopping malls again\n\nmalls_coords <- get_coords(malls_list)\n\nInspect results\n\nmalls_coords[(is.na(malls_coords$postal) | is.na(malls_coords$latitude) | is.na(malls_coords$longitude)), ]\n\n\n\n3.2.2.4 Convert dataframe into sf object, assign and transform CRS\n\nHere we use,\n\nst_as_sf() function of sf package to convert the data frame into sf object\nst_transform() function of sf package to transform the coordinates of the sf object\n\n\n\nmalls_sf <- st_as_sf(malls_coords,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\n\n3.2.2.5 Call get_prox function\n\nrs_coords_sf <- get_prox(rs_coords_sf, malls_sf, \"PROX_MALL\") \n\n\n\n\n3.2.3 All Primary Schools\nIn this section, we want to find the number of primary schools that are within 1km from HDBs.\nWe get our data from data.gov.sg. It is in a csv format.\n\npri_sch <- read_csv(\"data/geospatial/general-information-of-schools.csv\")\n\n\n3.2.3.1 Filter data to get only Primary Schools\n\npri_sch <- pri_sch %>%\n  filter(mainlevel_code == \"PRIMARY\") %>%\n  select(school_name, address, postal_code, mainlevel_code)\n\n\n\n3.2.3.2 Create list to store primary school postal codes and names\n\nprisch_list <- sort(unique(pri_sch$postal_code))\n\n\n\n3.2.3.3 Call get_coords function to retrieve coordinates of primary schools from OneMap.\n\nprisch_coords <- get_coords(prisch_list)\n\n\n\n3.2.3.4 Inspect results\n\nprisch_coords[(is.na(prisch_coords$postal) | is.na(prisch_coords$latitude) | is.na(prisch_coords$longitude)), ]\n\nThere are no problems with retrieving the postal code.\n\n\n3.2.3.5 Combine coordinates with name of primary schools\n\nprisch_coords = prisch_coords[c(\"postal\",\"latitude\", \"longitude\")]\npri_sch <- left_join(pri_sch, prisch_coords, by = c('postal_code' = 'postal'))\n\n\n\n3.2.3.6 Convert primary school df to sf object and transform CRS\n\nprisch_sf <- st_as_sf(pri_sch,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\n\n3.2.3.7 Call get_within function to get the number of primary schools within 1km of HDB\n\nrs_coords_sf <- get_within(rs_coords_sf, prisch_sf, 1000, \"WITHIN_1KM_PRISCH\")\n\n\n\n\n3.2.4 Good (Top 10) primary schools\nIn this section, we want to find the proximity of good primary schools to HDBs.\nAs there are no datasets that we can download from public data portals, an alternative would be to extract the “good” primary schools from forums or other websites.\nOne particular forum that we can use is www.salary.sg where they provide a list of primary schools and rank them according to popularity.\n\nSimilar to how we used XPath expression to scrape data for Shopping Malls in Singapore from Wikipedia, we will also use XPaths here.\nThe difference is that here, the lists are ordered. Hence we have to change the ul to ol.\nAlso the attribute is id instead.\n\nIn a nutshell, the following code chunk will perform 4 steps:\n\nRead the Salary Forum html page containing the Good Primary Schools in Singapore\nRead all the text portion (html_text()) of the Ordered List element selected by html_nodes()\nMinor data transformation\nConverting the name to uppercase\nDeleting the substring in primary school names containing (PRIMARY SECTION)\nTrim whitespaces\nAppending the schools extracted to a dataframe called good_pri and selecting the top 10 into top_good_pri dataframe\n\n\n3.2.4.1 Extract good primary schools from website\n\nurl <- \"https://www.salary.sg/2022/best-primary-schools-2022-by-popularity/\"\n\ngood_pri <- data.frame()\n\nschools <- read_html(url) %>%\n  html_nodes(xpath = paste('//*[@id=\"post-33132\"]/div[3]/div/div/ol/li') ) %>%\n  html_text() \n\nfor (i in (schools)){\n  sch_name <- toupper(gsub(\" – .*\",\"\",i))\n  sch_name <- gsub(\"\\\\(PRIMARY SECTION)\",\"\",sch_name)\n  sch_name <- trimws(sch_name)\n  new_row <- data.frame(pri_sch_name=sch_name)\n  # Add the row\n  good_pri <- rbind(good_pri, new_row)\n}\n\ntop_good_pri <- head(good_pri, 10)\n\n\n\n3.2.4.2 Check if primary school names from data.gov.sg and from the online blogpost matches\n\ntop_good_pri$pri_sch_name[!top_good_pri$pri_sch_name %in% prisch_sf$school_name]\n\n\nThese 5 primary schools are not found in the government’s list of primary schools.\n\nMETHODIST GIRLS’ SCHOOL (PRIMARY)\nCATHOLIC HIGH SCHOOL\nHOLY INNOCENTS’ PRIMARY SCHOOL\nCHIJ ST. NICHOLAS GIRLS’ SCHOOL\nST. HILDA’S PRIMARY SCHOOL\n\nFor primary school names with apostrophes, we have to standardise and change them.\nFor catholic high school, its mainlevel_code is not PRIMARY, but MIXED LEVELS and was hence missed out from the dataset.\n\n\n3.4.2.3 Change invalid names\n\ntop_good_pri$pri_sch_name[top_good_pri$pri_sch_name == \"CHIJ ST. NICHOLAS GIRLS’ SCHOOL\"] <- \"CHIJ ST. NICHOLAS GIRLS' SCHOOL\"\ntop_good_pri$pri_sch_name[top_good_pri$pri_sch_name == \"ST. HILDA’S PRIMARY SCHOOL\"] <- \"ST. HILDA'S PRIMARY SCHOOL\"\ntop_good_pri$pri_sch_name[top_good_pri$pri_sch_name == \"HOLY INNOCENTS’ PRIMARY SCHOOL\"] <- \"HOLY INNOCENTS' PRIMARY SCHOOL\"\ntop_good_pri$pri_sch_name[top_good_pri$pri_sch_name == \"METHODIST GIRLS’ SCHOOL (PRIMARY)\"] <- \"METHODIST GIRLS' SCHOOL (PRIMARY)\"\n\n\ngood_pri_list <- unique(top_good_pri$pri_sch_name)\ngoodprisch_coords <- get_coords(good_pri_list)\n\n\n\n\n\n\n\nTo clarify/find out\n\n\n\n\n\nWhy do I need to get unique items from top_good_pri when I know that the elements are unique? The function get_coords doesn’t work if I simply get_coords(top_good_pri)\nThe error: Error in vapply(elements, encode, character(1)) : values must be length 1, but FUN(X[[1]]) result is length 10\n\n\n\nInspect results\n\ngoodprisch_coords[(is.na(goodprisch_coords$postal) | is.na(goodprisch_coords$latitude) | is.na(goodprisch_coords$longitude)), ]\n\n\n\n3.4.2.4 Convert dataframe to sf objects, assign then transform CRS\n\ngoodpri_sf <- st_as_sf(goodprisch_coords,\n                    coords = c(\"longitude\", \n                               \"latitude\"),\n                    crs=4326) %>%\n  st_transform(crs = 3414)\n\n\n\n3.4.2.5 Call get_prox function to get proximity of good primary schools to HDB\n\nrs_coords_sf <- get_prox(rs_coords_sf, goodpri_sf, \"PROX_GOOD_PRISCH\")\n\n\n\n\n3.4.3 Write to RDS\n\nrs_factors_rds <- write_rds(rs_coords_sf, \"data/aspatial/rds/rs_factors.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#subzone-layer",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#subzone-layer",
    "title": "Take-home_Ex03",
    "section": "4.1 Subzone layer",
    "text": "4.1 Subzone layer\n\nmpsz_sf <- st_read(dsn = \"data/geospatial\", layer=\"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\zoe-chia\\IS415\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nOur subzone layer is a simple feature with no EPSG.\n\n\n4.1.1 Transform CRS\n\nmpsz_sf <- st_transform(mpsz_sf, 3414)\n\n\n\n4.1.2 Check and remove invalid geometries\n\nlength(which(st_is_valid(mpsz_sf) == FALSE))\n\n[1] 6\n\n\n\nmpsz_sf <- st_make_valid(mpsz_sf)\nlength(which(st_is_valid(mpsz_sf) == FALSE))\n\n[1] 0"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#resale-prices-with-locational-factors",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#resale-prices-with-locational-factors",
    "title": "Take-home_Ex03",
    "section": "4.2 Resale prices with locational factors",
    "text": "4.2 Resale prices with locational factors\n\n4.2.1 Read RDS File\n\nrs_sf <- read_rds(\"data/aspatial/rds/rs_factors.rds\")\n\n\nglimpse(rs_sf)\n\nRows: 25,503\nColumns: 26\n$ month                 <chr> \"2021-01\", \"2021-01\", \"2021-01\", \"2021-01\", \"202…\n$ town                  <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG M…\n$ address               <chr> \"547 ANG MO KIO AVE 10\", \"414 ANG MO KIO AVE 10\"…\n$ block                 <chr> \"547\", \"414\", \"509\", \"467\", \"571\", \"134\", \"204\",…\n$ street_name           <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG M…\n$ flat_type             <chr> \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", \"4 ROOM\"…\n$ storey_range          <chr> \"04 TO 06\", \"01 TO 03\", \"01 TO 03\", \"07 TO 09\", …\n$ floor_area_sqm        <dbl> 92, 92, 91, 92, 92, 98, 92, 92, 92, 92, 92, 109,…\n$ flat_model            <chr> \"New Generation\", \"New Generation\", \"New Generat…\n$ age_of_unit           <dbl> 480, 504, 492, 504, 504, 516, 528, 516, 504, 504…\n$ lease_commence_date   <dbl> 1981, 1979, 1980, 1979, 1979, 1978, 1977, 1978, …\n$ remaining_lease_mths  <dbl> 708, 693, 702, 695, 689, 681, 661, 682, 692, 692…\n$ resale_price          <dbl> 370000, 375000, 380000, 385000, 410000, 410000, …\n$ postal                <chr> \"560547\", \"560414\", \"560509\", \"560467\", \"560571\"…\n$ geometry              <POINT [m]> POINT (30770.07 39578.64), POINT (30292.01…\n$ PROX_ELDERLYCARE      <dbl> 1.08567795, 0.15039052, 0.72242472, 0.09816285, …\n$ PROX_MRT              <dbl> 1.0486764, 0.7574007, 0.4567509, 0.8868553, 0.55…\n$ PROX_HAWKER           <dbl> 0.4442515, 0.2050009, 0.4495734, 0.3190679, 0.25…\n$ PROX_PARK             <dbl> 0.7520454, 0.6484302, 0.3677768, 0.3906401, 0.49…\n$ PROX_SUPERMARKET      <dbl> 0.4184204, 0.1946009, 0.4435109, 0.4269715, 0.19…\n$ WITHIN_350M_CHILDCARE <int> 2, 3, 3, 3, 3, 2, 6, 3, 3, 3, 3, 3, 5, 2, 3, 5, …\n$ WITHIN_350M_BUS       <int> 4, 7, 10, 4, 8, 2, 8, 7, 6, 7, 7, 7, 8, 8, 11, 5…\n$ PROX_CBD              <dbl> 4.921739, 4.011426, 4.152967, 4.369319, 4.377164…\n$ PROX_MALL             <dbl> 1.1849973, 0.8565918, 0.3544669, 0.9304150, 0.71…\n$ WITHIN_1KM_PRISCH     <int> 1, 3, 2, 3, 2, 2, 3, 2, 3, 3, 1, 2, 3, 2, 2, 2, …\n$ PROX_GOOD_PRISCH      <dbl> 2.6163174, 1.4292244, 1.7689255, 1.7759141, 2.02…\n\n\n\n\n4.2.2 Convert storey range to ordinal data\nAs we will be performing a regression analysis, our categorical data will have to be converted to numbers, as such:\n\n01 to 03: 1\n04 to 06: 2\n07 to 09: 3, so on and so forth\n\n\n4.2.2.1 Extract unique storey_range and sort\n\nstoreys <- sort(unique(rs_sf$storey_range))\n\n\n\n4.2.2.2 Create dataframe storey_range_order to store order of storey_range\n\nstorey_order <- 1:length(storeys)\nstorey_range_order <- data.frame(storeys, storey_order)\nglimpse(storey_range_order)\n\nRows: 17\nColumns: 2\n$ storeys      <chr> \"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15…\n$ storey_order <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17\n\n\n\n\n4.2.2.3 Combine storey_order and resale price dataframe (rs_sf)\n\nrs_sf <- left_join(rs_sf, storey_range_order, by= c(\"storey_range\" = \"storeys\"))\n\n\n\n4.2.2.4 Select required columns for analysis\n\nrs_req <- rs_sf %>%\n  select(month, age_of_unit, resale_price, floor_area_sqm, storey_order, remaining_lease_mths,\n         PROX_CBD, PROX_ELDERLYCARE, PROX_HAWKER, PROX_MRT, PROX_PARK, PROX_GOOD_PRISCH, PROX_MALL,\n         PROX_SUPERMARKET, WITHIN_350M_CHILDCARE, WITHIN_350M_BUS, WITHIN_1KM_PRISCH)\n\n\n\n4.2.2.5 Write to RDS\n\nrs_final <- write_rds(rs_req, \"data/aspatial/rds/rs_final.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#eda-of-resale-price",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#eda-of-resale-price",
    "title": "Take-home_Ex03",
    "section": "5.1 EDA of Resale Price",
    "text": "5.1 EDA of Resale Price\n\n5.1.1 Plot histogram of resale price\n\nggplot(data=rs_req, aes(x=`resale_price`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + \n  scale_x_continuous(labels = scales::comma)\n\n\n\n\nThe results above reveals a right skewed distribution which means that more resale HDB units were transacted at a lower price. This skewed distribution can be normalised by using a log transformation.\n\n5.1.1.1 Normalising with Log Transformation\n\nrs_req <- rs_req %>%\n  mutate(`lg_resale_price` = log(resale_price))\n\n\n\n5.1.1.2 Plotting normalised resale price\n\nggplot(data=rs_req, aes(x=`lg_resale_price`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light green\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#multiple-histogram-plots---distribution-of-variables",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#multiple-histogram-plots---distribution-of-variables",
    "title": "Take-home_Ex03",
    "section": "5.2 Multiple Histogram Plots - Distribution of Variables",
    "text": "5.2 Multiple Histogram Plots - Distribution of Variables\n\n5.2.1 Structural Factors\n\n5.2.1.1 Extract columns to plot\n\ns_factor <- c(\"floor_area_sqm\", \"storey_order\", \"remaining_lease_mths\")\n\n\n\n5.2.1.2 Create list to store histogram of structural factors\nThe following code chunk performs 3 steps:\n\nCreating a vector of the size of our structural factors called s_factor_hist_list\nPlotting a histogram for each of the structural factors\nAppending the histogram to the created vector\n\n\ns_factor_hist_list <- vector(mode = \"list\", length = length(s_factor))\nfor (i in 1:length(s_factor)) {\n  hist_plot <- ggplot(rs_req, aes_string(x = s_factor[[i]])) +\n    geom_histogram(color=\"black\", fill = \"light blue\") +\n    labs(title = s_factor[[i]]) +\n    theme(plot.title = element_text(size = 10),\n          axis.title = element_blank())\n  \n  s_factor_hist_list[[i]] <- hist_plot\n}\n\n\n\nPlot histograms\n\nggarrange(plotlist = s_factor_hist_list,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\nFrom the results, we can see that only floor_area_sqm resembles a normal distribution.\nstorey_order is right skewed, which means that resale flats tend to be on the lower levels.\nremaining_lease_mths has 3 peaks at around 760 months, 900 months and 1180 months.\n\n\n\n5.2.2 Locational Factors\n\n5.2.2.1 Extract columns to plot\n\nl_factor <- c(\"PROX_CBD\", \"PROX_ELDERLYCARE\", \"PROX_HAWKER\", \"PROX_MRT\", \"PROX_PARK\", \"PROX_GOOD_PRISCH\", \"PROX_MALL\",\n              \"PROX_SUPERMARKET\", \"WITHIN_350M_CHILDCARE\", \"WITHIN_350M_BUS\", \"WITHIN_1KM_PRISCH\")\n\nPlot Histograms\n\nl_factor_hist_list <- vector(mode = \"list\", length = length(l_factor))\nfor (i in 1:length(l_factor)) {\n  hist_plot <- ggplot(rs_req, aes_string(x = l_factor[[i]])) +\n    geom_histogram(color=\"midnight blue\", fill = \"light sky blue\") +\n    labs(title = l_factor[[i]]) +\n    theme(plot.title = element_text(size = 10),\n          axis.title = element_blank())\n  \n  l_factor_hist_list[[i]] <- hist_plot\n}\n\nggarrange(plotlist = l_factor_hist_list,\n          ncol = 4,\n          nrow = 4)\n\n\n\n\nFrom the results above,\n\nPROX_CBD, WITHIN_350M_BUS and WITHIN_1KM_PRISCH have a normal distribution.\nOther variables like PROX_ELDERLYCARE, PROX_HAWKER, PROX_MRT, PROX_PARK, PROX_MALL, PROX_CHAS, PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE have a right skewed distribution."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#drawing-statistical-point-map",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#drawing-statistical-point-map",
    "title": "Take-home_Ex03",
    "section": "5.3 Drawing Statistical Point Map",
    "text": "5.3 Drawing Statistical Point Map\n\ntmap_mode('view')\ntmap_options(check.and.fix = TRUE)\ntm_shape(rs_final) +  \n  tm_dots(col = \"resale_price\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nFrom the graph above, we can see that the resale flats in the east are more expensive than that of the west. Resale flats around Punggol, Central and in the South (probably around Tiong Bahru, Alexanra area) seem to be on the more expensive side as well."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#multiple-linear-regression-ols",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#multiple-linear-regression-ols",
    "title": "Take-home_Ex03",
    "section": "6.1 Multiple Linear Regression (OLS)",
    "text": "6.1 Multiple Linear Regression (OLS)\n\n6.1.1 Checking for multi-collinearity\n\nresale_nogeom_sf <- rs_final %>% \n  st_drop_geometry() %>%\n  select(-1)\n\n\ncorrplot(cor(resale_nogeom_sf[,]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.6, number.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nFrom the results,\n\nage_of_unit and remaining_lease_mths have a perfectly negative correlation, which is expected.\nresale_price and storey_order also have a slightly positive correlation.\nWe will exclude remaining_lease_mths for this study.\n\nIn this section, we will prepare train and test datasets, calibrate the predictive models and compare the best model for predicting the future outcomes.\n\n\nExtracting coordinates data\nAs taking data from January 2021 to December 2022 caused R to crash and my laptop to slow down tremedously on multiple occasions, we will be taking data from the last quarter of 2022 as the training data.\n\ntrain_data <- rs_final %>% \n  filter(month >= \"2022-09\" & month <= \"2022-12\") %>% \n  select(-1)\n  \ntest_data <- rs_final %>% \n  filter(month >= \"2023-01\" & month <= \"2023-02\") %>%\n  select(-1)\n\n\ncoords <- st_coordinates(rs_final)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\nWrite all the output into rds for future use:\n\ncoords_train <- write_rds(coords_train, \"data/model/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/model/coords_test.rds\" )\n\n\n\n6.2.2 Implementing MLR\n\nrs_mlr1 <- lm(formula = resale_price ~ floor_area_sqm + storey_order + \n                age_of_unit + PROX_CBD + PROX_ELDERLYCARE + \n                PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n                PROX_SUPERMARKET + PROX_GOOD_PRISCH + \n                WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n              data =train_data)\nsummary(rs_mlr1)\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + age_of_unit + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRISCH + WITHIN_350M_CHILDCARE + \n    WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-240359  -45692   -8097   38997  430963 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           450713.358  18106.992  24.892  < 2e-16 ***\nfloor_area_sqm          3633.358    179.659  20.224  < 2e-16 ***\nstorey_order           20745.111    590.019  35.160  < 2e-16 ***\nage_of_unit             -352.714      7.824 -45.081  < 2e-16 ***\nPROX_CBD               -5241.173    454.522 -11.531  < 2e-16 ***\nPROX_ELDERLYCARE      -32423.165   1892.818 -17.130  < 2e-16 ***\nPROX_HAWKER           -32272.445   2439.609 -13.229  < 2e-16 ***\nPROX_MRT              -57922.413   3392.071 -17.076  < 2e-16 ***\nPROX_PARK             -35366.176   2751.123 -12.855  < 2e-16 ***\nPROX_MALL              47813.954   2483.230  19.255  < 2e-16 ***\nPROX_SUPERMARKET      -39163.957   7592.024  -5.159 2.62e-07 ***\nPROX_GOOD_PRISCH      -10718.446    690.548 -15.522  < 2e-16 ***\nWITHIN_350M_CHILDCARE  -1814.192    631.482  -2.873  0.00409 ** \nWITHIN_350M_BUS          370.279    418.129   0.886  0.37591    \nWITHIN_1KM_PRISCH     -11960.109    865.039 -13.826  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 70240 on 3766 degrees of freedom\nMultiple R-squared:  0.7043,    Adjusted R-squared:  0.7032 \nF-statistic: 640.8 on 14 and 3766 DF,  p-value: < 2.2e-16\n\n\nFrom the results, we can see that all the variables are statistically significant.\n\nols_regress(rs_mlr1)\n\n                            Model Summary                              \n----------------------------------------------------------------------\nR                       0.839       RMSE                    70237.677 \nR-Squared               0.704       Coef. Var                  12.492 \nAdj. R-Squared          0.703       MSE                4933331205.325 \nPred R-Squared          0.702       MAE                     53504.272 \n----------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                    ANOVA                                      \n------------------------------------------------------------------------------\n                    Sum of                                                    \n                   Squares          DF       Mean Square       F         Sig. \n------------------------------------------------------------------------------\nRegression    4.425579e+13          14      3.161128e+12     640.77    0.0000 \nResidual      1.857893e+13        3766    4933331205.325                      \nTotal         6.283472e+13        3780                                        \n------------------------------------------------------------------------------\n\n                                              Parameter Estimates                                               \n---------------------------------------------------------------------------------------------------------------\n                model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n---------------------------------------------------------------------------------------------------------------\n          (Intercept)    450713.358     18106.992                  24.892    0.000    415212.897    486213.820 \n       floor_area_sqm      3633.358       179.659        0.189     20.224    0.000      3281.119      3985.596 \n         storey_order     20745.111       590.019        0.344     35.160    0.000     19588.325     21901.898 \n          age_of_unit      -352.714         7.824       -0.456    -45.081    0.000      -368.053      -337.374 \n             PROX_CBD     -5241.173       454.522       -0.113    -11.531    0.000     -6132.307     -4350.039 \n     PROX_ELDERLYCARE    -32423.165      1892.818       -0.157    -17.130    0.000    -36134.213    -28712.117 \n          PROX_HAWKER    -32272.445      2439.609       -0.130    -13.229    0.000    -37055.528    -27489.362 \n             PROX_MRT    -57922.413      3392.071       -0.162    -17.076    0.000    -64572.888    -51271.937 \n            PROX_PARK    -35366.176      2751.123       -0.125    -12.855    0.000    -40760.012    -29972.341 \n            PROX_MALL     47813.954      2483.230        0.201     19.255    0.000     42945.348     52682.560 \n     PROX_SUPERMARKET    -39163.957      7592.024       -0.048     -5.159    0.000    -54048.835    -24279.080 \n     PROX_GOOD_PRISCH    -10718.446       690.548       -0.146    -15.522    0.000    -12072.331     -9364.561 \nWITHIN_350M_CHILDCARE     -1814.192       631.482       -0.028     -2.873    0.004     -3052.272      -576.112 \n      WITHIN_350M_BUS       370.279       418.129        0.008      0.886    0.376      -449.503      1190.060 \n    WITHIN_1KM_PRISCH    -11960.109       865.039       -0.147    -13.826    0.000    -13656.098    -10264.119 \n---------------------------------------------------------------------------------------------------------------\n\n\n\n\n6.2.3 Predicting with OLS\n\nols_pred <- predict.lm(rs_mlr1, test_data) %>%\n  write_rds(\"data/model/price_ols_pred.rds\")\n\n\n\n6.2.4 RMSE of OLS Regression Model\n\nsqrt(mean((test_data$resale_price - ols_pred)^2))\n\n[1] 72525.65"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#multiple-linear-regression-gwr",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#multiple-linear-regression-gwr",
    "title": "Take-home_Ex03",
    "section": "6.3 Multiple Linear Regression (GWR)",
    "text": "6.3 Multiple Linear Regression (GWR)\n\n6.3.1 Testing LR Assumptions\nWith reference to https://is415-msty.netlify.app/posts/2021-10-25-take-home-exercise-3/\nThere are 4 assumptions that must be met before we perform regression on geographical data:\n\nTest of multicollinearity: ensure that the variables are not highly correlated\nTest of non-linearity: the relationship between the dependent variable and independent variables should be approximately linear\nTesting for normality assumption: The residuals are assumed to be normally distributed\nTest for spatial autocorrelation\n\n\n6.3.1.1 Checking for multicollinearity\nWe’ll test for signs of multicollinearity with the ols_vif_tol() function of our olsrr package. In general, if the VIF value is less than 5, then there is usually no sign/possibility of correlations.\n\nols_vif_tol(rs_mlr1)\n\n               Variables Tolerance      VIF\n1         floor_area_sqm 0.8997328 1.111441\n2           storey_order 0.8182142 1.222174\n3            age_of_unit 0.7676598 1.302660\n4               PROX_CBD 0.8180964 1.222350\n5       PROX_ELDERLYCARE 0.9313484 1.073712\n6            PROX_HAWKER 0.8090319 1.236045\n7               PROX_MRT 0.8671275 1.153233\n8              PROX_PARK 0.8291366 1.206074\n9              PROX_MALL 0.7174699 1.393787\n10      PROX_SUPERMARKET 0.9162686 1.091383\n11      PROX_GOOD_PRISCH 0.8880768 1.126029\n12 WITHIN_350M_CHILDCARE 0.8167785 1.224322\n13       WITHIN_350M_BUS 0.8840506 1.131157\n14     WITHIN_1KM_PRISCH 0.6972107 1.434287\n\n\nSince the VIF of the independent variables is less than 10, we can safely conclude that there are no signs of multicollinearity.\n\n\n6.3.1.2 Test for non-linearity\nIn addition to testing for multicollinearity, we also need to test the assumption that linearity and additivity of the relationship between dependent and independent variables when performing multiple linear regression.\n\nols_plot_resid_fit(rs_mlr1)\n\n\n\n\nFor most part, our data points are scattered around the 0 line (though there are a few outliers). However, it is still within range of tolerance, thus we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n6.3.1.3 Test for normality assumption\n\nols_plot_resid_hist(rs_mlr1)\n\n\n\n\n\n\n6.3.1.4 Testing for spatial autocorrelation\nSince the hedonic model we are trying to build is using geographically referenced attributes, it is important for us to visualise the residual of the hedonic pricing model. To do the spatial autocorrelation test, we’ll need to convert rs_mlr1 into a SpatialPointsDataFrame.\n\nBind data with residuals\n\n\nmlr_output <- as.data.frame(rs_mlr1$residuals)\nrs_res_sf <- cbind(train_data, \n                        rs_mlr1$residuals) %>%\n  rename(`MLR_RES` = `rs_mlr1.residuals`)\n\n\nConvert sf to sp\n\n\nrs_sp <- as_Spatial(rs_res_sf)\nrs_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 3781 \nextent      : 11655.33, 42645.18, 28330.23, 48675.05  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : age_of_unit, resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,         PROX_PARK,  PROX_GOOD_PRISCH,       PROX_MALL,     PROX_SUPERMARKET, WITHIN_350M_CHILDCARE, WITHIN_350M_BUS, ... \nmin values  :          36,       360000,             74,            1,                  542, 1.98998472123509, 1.98943787433087e-08, 0.0395321340230547, 0.0217933772276802, 0.045419944744772, 0.117653336456023,               0, 2.98731019421495e-07,                     0,               0, ... \nmax values  :         648,      1370000,            123,           17,                 1148, 16.2036821760627,      3.2823136575237,   2.80237498784495,   2.12908590009577,  2.39840352006236,   8.6550509283742, 3.1165426885944,     1.36375821567757,                    17,              19, ... \n\n\n\nVisualise residuals\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz_sf)+\n  tm_polygons(alpha = 0.4) +\ntm_shape(rs_sp) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\n\n\n6.3.2 Moran’s I Test\nTo confirm that there are indeed signs of spatial autocorrelation, we will perform the Moran’s I Test.\n\n6.3.2.1 Compute distance based weight matrix\n\nnb <- dnearneigh(coordinates(rs_sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 3781 \nNumber of nonzero links: 579010 \nPercentage nonzero weights: 4.050165 \nAverage number of links: 153.1367 \nLink number distribution:\n\n  1   3   4  13  15  16  17  19  20  22  23  24  25  26  27  28  29  30  31  32 \n  2   4   5  16   2   1  17   4   3   8   1   3   2   4   7   2  18   8   5  13 \n 33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52 \n  6   6   9   7   3   6   7   3  11  11   3  11  32  10   5  19   6  14  12   9 \n 53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 \n 12  10  25  35  28  34   9  39  31  26  17  29  26  18  24  25  25  27  14  27 \n 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 \n 22  23  16  19  27  34  19   7  23  20  20  12  29  16  26  14  16  15  30  14 \n 93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 \n 23  38  31  12  18  14  22  11  12  15  13  29  31  15  13  23  29  27  27  16 \n113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 \n 30  20  19   8  29   8  26  15  16  11  16  19  18  45  17  22  12  10  15  12 \n133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 \n  9  28  14  14   3  27  19  10   8  22   6  12  14  15   6  11  12  13   9   9 \n153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 \n  7  12   9   7   6   3   6   9  10   4   5   3   6  10   5  11   3   1  17  11 \n173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 \n  6   4   7   8   8   4   5   4   8   2  19   6  28  17   9  19   7   7  14   3 \n193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 \n  8   8  22  15  16  20  11  30  11   4   6   4  12  12   6   9   4   9   3   3 \n213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 \n  3   6   3   6   6   6   6   8   2   4   4  10   7   6   6   9   6   7  14   6 \n233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 \n  4  16  14   6   1  10  17  17   4  18  11   7  21  21  15  11  13   3  14   6 \n253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 \n 15  17  19   4  12   6  11   8   5   8  11   4   6  17   9  14  10  12  10  11 \n273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 \n  8   3   6  12  20  11  12  10   3   6   5   6   6   3   3   5   4   3   6   2 \n293 294 295 296 297 300 301 302 303 304 305 306 307 308 309 310 311 313 316 319 \n 16   3   4   4   9   1   3   1   6   4   6   1   1   3   8   1   3   3   1   2 \n321 322 323 324 327 328 329 330 331 332 333 334 335 336 337 338 342 343 344 345 \n  1   2   3   5   1   1   7   2   9   1   6   1   2   5   2   9   3   2   4   6 \n346 347 348 349 350 351 354 355 356 357 358 359 360 361 362 365 367 368 369 370 \n  1   2   1   5   2   1   3   4   1   3   4   1   2   2   2   3   3   2   2   1 \n371 372 373 375 377 378 380 381 382 383 384 385 387 388 389 390 392 393 395 396 \n  1   1   4   2   2   3   2   2   1   5   1   2   3   7   1   2   8   1   3   2 \n397 398 400 401 403 405 413 416 418 419 420 421 422 423 427 428 430 431 433 435 \n  1   3   4   1   1   1   1   1   3   1   1   1   2   2   1   2   3   2   4   1 \n436 437 445 450 453 466 467 \n  2   1   2   1   1   1   1 \n2 least connected regions:\n2270 2271 with 1 link\n1 most connected region:\n544 with 467 links\n\n\n\n\n6.3.2.2 Convert the output neighbours lists into spatial weights\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 3781 \nNumber of nonzero links: 579010 \nPercentage nonzero weights: 4.050165 \nAverage number of links: 153.1367 \nLink number distribution:\n\n  1   3   4  13  15  16  17  19  20  22  23  24  25  26  27  28  29  30  31  32 \n  2   4   5  16   2   1  17   4   3   8   1   3   2   4   7   2  18   8   5  13 \n 33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52 \n  6   6   9   7   3   6   7   3  11  11   3  11  32  10   5  19   6  14  12   9 \n 53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 \n 12  10  25  35  28  34   9  39  31  26  17  29  26  18  24  25  25  27  14  27 \n 73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 \n 22  23  16  19  27  34  19   7  23  20  20  12  29  16  26  14  16  15  30  14 \n 93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 \n 23  38  31  12  18  14  22  11  12  15  13  29  31  15  13  23  29  27  27  16 \n113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 \n 30  20  19   8  29   8  26  15  16  11  16  19  18  45  17  22  12  10  15  12 \n133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 \n  9  28  14  14   3  27  19  10   8  22   6  12  14  15   6  11  12  13   9   9 \n153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 \n  7  12   9   7   6   3   6   9  10   4   5   3   6  10   5  11   3   1  17  11 \n173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 \n  6   4   7   8   8   4   5   4   8   2  19   6  28  17   9  19   7   7  14   3 \n193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 \n  8   8  22  15  16  20  11  30  11   4   6   4  12  12   6   9   4   9   3   3 \n213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 \n  3   6   3   6   6   6   6   8   2   4   4  10   7   6   6   9   6   7  14   6 \n233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 \n  4  16  14   6   1  10  17  17   4  18  11   7  21  21  15  11  13   3  14   6 \n253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 \n 15  17  19   4  12   6  11   8   5   8  11   4   6  17   9  14  10  12  10  11 \n273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 \n  8   3   6  12  20  11  12  10   3   6   5   6   6   3   3   5   4   3   6   2 \n293 294 295 296 297 300 301 302 303 304 305 306 307 308 309 310 311 313 316 319 \n 16   3   4   4   9   1   3   1   6   4   6   1   1   3   8   1   3   3   1   2 \n321 322 323 324 327 328 329 330 331 332 333 334 335 336 337 338 342 343 344 345 \n  1   2   3   5   1   1   7   2   9   1   6   1   2   5   2   9   3   2   4   6 \n346 347 348 349 350 351 354 355 356 357 358 359 360 361 362 365 367 368 369 370 \n  1   2   1   5   2   1   3   4   1   3   4   1   2   2   2   3   3   2   2   1 \n371 372 373 375 377 378 380 381 382 383 384 385 387 388 389 390 392 393 395 396 \n  1   1   4   2   2   3   2   2   1   5   1   2   3   7   1   2   8   1   3   2 \n397 398 400 401 403 405 413 416 418 419 420 421 422 423 427 428 430 431 433 435 \n  1   3   4   1   1   1   1   1   3   1   1   1   2   2   1   2   3   2   4   1 \n436 437 445 450 453 466 467 \n  2   1   2   1   1   1   1 \n2 least connected regions:\n2270 2271 with 1 link\n1 most connected region:\n544 with 467 links\n\nWeights style: W \nWeights constants summary:\n     n       nn   S0       S1       S2\nW 3781 14295961 3781 83.00884 15245.78\n\n\n\n\n6.3.2.3 Perform Moran’s I Test for Residual Spatial Autocorrelation\n\nlm.morantest(rs_mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = resale_price ~ floor_area_sqm + storey_order +\nage_of_unit + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT +\nPROX_PARK + PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRISCH +\nWITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data =\ntrain_data)\nweights: nb_lw\n\nMoran I statistic standard deviate = 206.61, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    4.442489e-01    -1.925511e-03     4.663369e-06 \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Global Moran’s I Test for residual spatial autocorrelation shows that it’s p value is less than 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the observed Moran I, 0.4442489, is greater than 0, we can infer that the residuals resemble cluster distribution."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#building-hedonic-pricing-models",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#building-hedonic-pricing-models",
    "title": "Take-home_Ex03",
    "section": "6.4 Building Hedonic Pricing Models",
    "text": "6.4 Building Hedonic Pricing Models\n\n6.4.1 Converting the training sf dataframe to SpatialPointDataframe\n\ntrain_data_sp <- as_Spatial(train_data)\n\n\n\n6.4.2 Fixed Bandwidth with gwr\nbw.gwr() will be used to determine the optimal bandwidth to be used.\n\nbw.fixed <- bw.gwr(formula = resale_price ~ floor_area_sqm + storey_order + \n                     age_of_unit + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n                     PROX_MRT + PROX_PARK + PROX_MALL  + PROX_SUPERMARKET + \n                     PROX_GOOD_PRISCH + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                     WITHIN_1KM_PRISCH, \n                   data=train_data_sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\nFixed bandwidth: 19221.21 CV score: 1.767774e+13 \nFixed bandwidth: 11881.73 CV score: 1.610065e+13 \nFixed bandwidth: 7345.691 CV score: 1.30449e+13 \nFixed bandwidth: 4542.262 CV score: 9.225845e+12 \nFixed bandwidth: 2809.648 CV score: 6.102053e+12 \nFixed bandwidth: 1738.834 CV score: 4.548358e+12 \nFixed bandwidth: 1077.034 CV score: 3.761762e+12 \nFixed bandwidth: 668.0191 CV score: 3.467091e+12 \nFixed bandwidth: 415.2341 CV score: 5.084433e+12 \nFixed bandwidth: 824.2488 CV score: 3.512193e+12 \nFixed bandwidth: 571.4638 CV score: 3.769612e+12 \nFixed bandwidth: 727.6935 CV score: 3.463079e+12 \nFixed bandwidth: 764.5744 CV score: 3.47704e+12 \nFixed bandwidth: 704.8999 CV score: 3.45938e+12 \nFixed bandwidth: 690.8127 CV score: 3.459859e+12 \nFixed bandwidth: 713.6063 CV score: 3.460223e+12 \nFixed bandwidth: 699.5191 CV score: 3.459271e+12 \nFixed bandwidth: 696.1935 CV score: 3.459378e+12 \nFixed bandwidth: 701.5744 CV score: 3.459273e+12 \nFixed bandwidth: 698.2488 CV score: 3.459296e+12 \nFixed bandwidth: 700.3041 CV score: 3.459266e+12 \nFixed bandwidth: 700.7893 CV score: 3.459267e+12 \nFixed bandwidth: 700.0043 CV score: 3.459267e+12 \nFixed bandwidth: 700.4894 CV score: 3.459266e+12 \nFixed bandwidth: 700.604 CV score: 3.459266e+12 \nFixed bandwidth: 700.4187 CV score: 3.459266e+12 \nFixed bandwidth: 700.5332 CV score: 3.459266e+12 \nFixed bandwidth: 700.4624 CV score: 3.459266e+12 \nFixed bandwidth: 700.4457 CV score: 3.459266e+12 \nFixed bandwidth: 700.4727 CV score: 3.459266e+12 \nFixed bandwidth: 700.4791 CV score: 3.459266e+12 \nFixed bandwidth: 700.4688 CV score: 3.459266e+12 \nFixed bandwidth: 700.4664 CV score: 3.459266e+12 \nFixed bandwidth: 700.4703 CV score: 3.459266e+12 \nFixed bandwidth: 700.4679 CV score: 3.459266e+12 \nFixed bandwidth: 700.4694 CV score: 3.459266e+12 \nFixed bandwidth: 700.4684 CV score: 3.459266e+12 \nFixed bandwidth: 700.469 CV score: 3.459266e+12 \nFixed bandwidth: 700.4687 CV score: 3.459266e+12 \nFixed bandwidth: 700.4689 CV score: 3.459266e+12 \nFixed bandwidth: 700.4687 CV score: 3.459266e+12 \nFixed bandwidth: 700.4688 CV score: 3.459266e+12 \n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom the results, the recommended bandwidth is 700.\nNow, calibrate the model using our fixed bandwidth found from above, and the gaussian kernel.\n\n\n\ngwr.fixed <- gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n                         age_of_unit + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n                         PROX_MRT + PROX_PARK + PROX_MALL  + PROX_SUPERMARKET +\n                         PROX_GOOD_PRISCH + WITHIN_350M_CHILDCARE + \n                         WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n                       data=train_data_sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-26 13:30:21 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    age_of_unit + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRISCH + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order age_of_unit PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET PROX_GOOD_PRISCH WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 3781\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-240359  -45692   -8097   38997  430963 \n\n   Coefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           450713.358  18106.992  24.892  < 2e-16 ***\n   floor_area_sqm          3633.358    179.659  20.224  < 2e-16 ***\n   storey_order           20745.111    590.019  35.160  < 2e-16 ***\n   age_of_unit             -352.714      7.824 -45.081  < 2e-16 ***\n   PROX_CBD               -5241.173    454.522 -11.531  < 2e-16 ***\n   PROX_ELDERLYCARE      -32423.165   1892.818 -17.130  < 2e-16 ***\n   PROX_HAWKER           -32272.445   2439.609 -13.229  < 2e-16 ***\n   PROX_MRT              -57922.413   3392.071 -17.076  < 2e-16 ***\n   PROX_PARK             -35366.176   2751.123 -12.855  < 2e-16 ***\n   PROX_MALL              47813.954   2483.230  19.255  < 2e-16 ***\n   PROX_SUPERMARKET      -39163.957   7592.024  -5.159 2.62e-07 ***\n   PROX_GOOD_PRISCH      -10718.446    690.548 -15.522  < 2e-16 ***\n   WITHIN_350M_CHILDCARE  -1814.192    631.482  -2.873  0.00409 ** \n   WITHIN_350M_BUS          370.279    418.129   0.886  0.37591    \n   WITHIN_1KM_PRISCH     -11960.109    865.039 -13.826  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 70240 on 3766 degrees of freedom\n   Multiple R-squared: 0.7043\n   Adjusted R-squared: 0.7032 \n   F-statistic: 640.8 on 14 and 3766 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 1.857893e+13\n   Sigma(hat): 70116.76\n   AIC:  95136.18\n   AICc:  95136.33\n   BIC:  91586.79\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 700.4688 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                Min.     1st Qu.      Median     3rd Qu.\n   Intercept             -1690083.33   147002.97   464532.33   598154.82\n   floor_area_sqm            -952.20     2073.10     2841.31     4177.88\n   storey_order             -7517.02    10390.24    12481.48    14918.71\n   age_of_unit               -905.18     -525.65     -423.65     -328.74\n   PROX_CBD               -375299.55   -23198.04    -4999.03    11234.35\n   PROX_ELDERLYCARE       -291263.79   -20751.36    -1095.66    15416.75\n   PROX_HAWKER            -392132.78   -32314.00   -13799.92    14008.27\n   PROX_MRT               -310809.74   -80218.25   -50939.28   -32968.81\n   PROX_PARK              -299737.71   -28126.11    -9860.68    14806.58\n   PROX_MALL              -657302.46   -34441.82    -6020.89    16771.26\n   PROX_SUPERMARKET       -191825.53   -28363.01     1423.94    20668.13\n   PROX_GOOD_PRISCH       -210241.76   -21365.16     2442.53    31148.18\n   WITHIN_350M_CHILDCARE   -44266.83    -2784.30     -376.04     1900.45\n   WITHIN_350M_BUS         -10101.48     -746.45      399.96     1776.53\n   WITHIN_1KM_PRISCH       -59267.83    -6682.30    -2043.98     3443.77\n                                Max.\n   Intercept             2699037.015\n   floor_area_sqm          15030.950\n   storey_order            38585.935\n   age_of_unit               -67.918\n   PROX_CBD               277522.907\n   PROX_ELDERLYCARE       269956.586\n   PROX_HAWKER            307686.410\n   PROX_MRT              1054006.548\n   PROX_PARK              249119.805\n   PROX_MALL              243482.671\n   PROX_SUPERMARKET       476269.678\n   PROX_GOOD_PRISCH       355353.190\n   WITHIN_350M_CHILDCARE  100090.294\n   WITHIN_350M_BUS         21758.962\n   WITHIN_1KM_PRISCH      116222.630\n   ************************Diagnostic information*************************\n   Number of data points: 3781 \n   Effective number of parameters (2trace(S) - trace(S'S)): 728.5852 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 3052.415 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 88248.78 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 87432.86 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 87940.06 \n   Residual sum of squares: 2.088439e+12 \n   R-square value:  0.966763 \n   Adjusted R-square value:  0.958827 \n\n   ***********************************************************************\n   Program stops at: 2023-03-26 13:30:36 \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe adjusted R Square of GWR is 0.958 which is significantly better than the global multiple linear regression model of 0.703.\n\n\n\n\n6.4.5 Adaptive Bandwidth\n\nbw.adaptive <- bw.gwr(formula = resale_price ~ floor_area_sqm + storey_order + \n                        age_of_unit + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n                        PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + \n                        PROX_GOOD_PRISCH + WITHIN_350M_CHILDCARE + \n                        WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n                      data=train_data_sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\nAdaptive bandwidth: 2344 CV score: 1.651069e+13 \nAdaptive bandwidth: 1457 CV score: 1.491351e+13 \nAdaptive bandwidth: 907 CV score: 1.288198e+13 \nAdaptive bandwidth: 569 CV score: 1.062866e+13 \nAdaptive bandwidth: 358 CV score: 8.09825e+12 \nAdaptive bandwidth: 229 CV score: 6.431199e+12 \nAdaptive bandwidth: 148 CV score: 5.242245e+12 \nAdaptive bandwidth: 99 CV score: 4.506142e+12 \nAdaptive bandwidth: 67 CV score: 4.021942e+12 \nAdaptive bandwidth: 49 CV score: 3.688149e+12 \nAdaptive bandwidth: 36 CV score: 3.4911e+12 \nAdaptive bandwidth: 30 CV score: 3.42616e+12 \nAdaptive bandwidth: 24 CV score: Inf \nAdaptive bandwidth: 31 CV score: 3.443262e+12 \nAdaptive bandwidth: 26 CV score: Inf \nAdaptive bandwidth: 29 CV score: 3.402138e+12 \nAdaptive bandwidth: 32 CV score: 3.45158e+12 \nAdaptive bandwidth: 30 CV score: 3.42616e+12 \nAdaptive bandwidth: 31 CV score: 3.443262e+12 \nAdaptive bandwidth: 30 CV score: 3.42616e+12 \nAdaptive bandwidth: 30 CV score: 3.42616e+12 \nAdaptive bandwidth: 29 CV score: 3.402138e+12 \n\n\nFrom the results, 29 is the recommended data points to be used.\n\ngwr.adaptive <- gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n                            age_of_unit + PROX_CBD + PROX_ELDERLYCARE + \n                            PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + PROX_GOOD_PRISCH + \n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                            WITHIN_1KM_PRISCH, \n                          data=train_data_sp, \n                          bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-26 13:33:05 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    age_of_unit + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRISCH + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order age_of_unit PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET PROX_GOOD_PRISCH WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 3781\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-240359  -45692   -8097   38997  430963 \n\n   Coefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           450713.358  18106.992  24.892  < 2e-16 ***\n   floor_area_sqm          3633.358    179.659  20.224  < 2e-16 ***\n   storey_order           20745.111    590.019  35.160  < 2e-16 ***\n   age_of_unit             -352.714      7.824 -45.081  < 2e-16 ***\n   PROX_CBD               -5241.173    454.522 -11.531  < 2e-16 ***\n   PROX_ELDERLYCARE      -32423.165   1892.818 -17.130  < 2e-16 ***\n   PROX_HAWKER           -32272.445   2439.609 -13.229  < 2e-16 ***\n   PROX_MRT              -57922.413   3392.071 -17.076  < 2e-16 ***\n   PROX_PARK             -35366.176   2751.123 -12.855  < 2e-16 ***\n   PROX_MALL              47813.954   2483.230  19.255  < 2e-16 ***\n   PROX_SUPERMARKET      -39163.957   7592.024  -5.159 2.62e-07 ***\n   PROX_GOOD_PRISCH      -10718.446    690.548 -15.522  < 2e-16 ***\n   WITHIN_350M_CHILDCARE  -1814.192    631.482  -2.873  0.00409 ** \n   WITHIN_350M_BUS          370.279    418.129   0.886  0.37591    \n   WITHIN_1KM_PRISCH     -11960.109    865.039 -13.826  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 70240 on 3766 degrees of freedom\n   Multiple R-squared: 0.7043\n   Adjusted R-squared: 0.7032 \n   F-statistic: 640.8 on 14 and 3766 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 1.857893e+13\n   Sigma(hat): 70116.76\n   AIC:  95136.18\n   AICc:  95136.33\n   BIC:  91586.79\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 29 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                Min.     1st Qu.      Median     3rd Qu.\n   Intercept             -9.7077e+06  1.1541e+05  4.7795e+05  7.2813e+05\n   floor_area_sqm        -8.8129e+04  1.8063e+03  2.6498e+03  4.1512e+03\n   storey_order           4.7048e+03  1.0078e+04  1.2260e+04  1.5203e+04\n   age_of_unit           -3.0064e+03 -5.7778e+02 -4.0668e+02 -3.2169e+02\n   PROX_CBD              -1.3416e+07 -3.9947e+04 -8.1224e+03  2.0843e+04\n   PROX_ELDERLYCARE      -1.3649e+06 -3.2581e+04 -7.9351e+02  3.1954e+04\n   PROX_HAWKER           -4.1611e+06 -4.3974e+04 -1.2027e+04  3.3131e+04\n   PROX_MRT              -2.1716e+06 -9.1428e+04 -4.7919e+04 -8.2240e+03\n   PROX_PARK             -9.6067e+05 -4.6258e+04 -7.5067e+03  2.3578e+04\n   PROX_MALL             -1.4432e+07 -5.2881e+04 -1.1583e+04  2.0969e+04\n   PROX_SUPERMARKET      -1.6720e+05 -2.9738e+04  1.1329e+03  3.0299e+04\n   PROX_GOOD_PRISCH      -5.7537e+06 -3.5160e+04  1.8050e+03  4.9617e+04\n   WITHIN_350M_CHILDCARE -4.2350e+05 -2.8826e+03 -2.8756e+02  2.7459e+03\n   WITHIN_350M_BUS       -7.8842e+04 -1.0723e+03  1.9548e+02  1.9903e+03\n   WITHIN_1KM_PRISCH     -1.3253e+05 -9.6660e+03 -2.9717e+03  3.3917e+03\n                               Max.\n   Intercept             94363600.4\n   floor_area_sqm           16826.4\n   storey_order             39960.4\n   age_of_unit               2312.5\n   PROX_CBD               1210548.3\n   PROX_ELDERLYCARE       4515538.4\n   PROX_HAWKER           11908359.4\n   PROX_MRT               1504446.1\n   PROX_PARK              6291828.1\n   PROX_MALL              2181980.9\n   PROX_SUPERMARKET        688628.2\n   PROX_GOOD_PRISCH      16783784.9\n   WITHIN_350M_CHILDCARE    53324.8\n   WITHIN_350M_BUS          40567.5\n   WITHIN_1KM_PRISCH       110618.2\n   ************************Diagnostic information*************************\n   Number of data points: 3781 \n   Effective number of parameters (2trace(S) - trace(S'S)): 910.8412 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 2870.159 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 88668.31 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 87570.62 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 89124.26 \n   Residual sum of squares: 2.084675e+12 \n   R-square value:  0.9668229 \n   Adjusted R-square value:  0.9562905 \n\n   ***********************************************************************\n   Program stops at: 2023-03-26 13:33:22"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#hedonic-pricing-model-with-random-forest",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#hedonic-pricing-model-with-random-forest",
    "title": "Take-home_Ex03",
    "section": "6.5 Hedonic Pricing Model with Random Forest",
    "text": "6.5 Hedonic Pricing Model with Random Forest\n\n6.5.1 Calibrating Random Forest Model\n\ntrain_data_nogeom <- train_data %>% st_drop_geometry()\n\n\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               age_of_unit + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + PROX_GOOD_PRISCH + \n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\n\n\nprint(rf)\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + age_of_unit +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRISCH + WITHIN_350M_CHILDCARE +      WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      3781 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1312256813 \nR squared (OOB):                  0.9210575 \n\n\n\n\n6.5.3 Calibrating Geographical Random Forest Model\n\n6.5.3.1 Calculating Bandwidth\n\ngwRF_bw <- grf.bw(formula = resale_price ~ floor_area_sqm + storey_order +\n                       age_of_unit + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                 data = train_data_nogeom,\n                 kernel = \"adaptive\",\n                 coords = coords_train)\n\n\nwrite_rds(gwRF_bw, \"data/model/gwRF_bw.rds\")\n\n\n\n6.4.3.2 Calibrating Model with Training Data\n\nset.seed(1234)\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       age_of_unit + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     ntree=20,\n                     bw=1183,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\nSave model output\n\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n\n\n\n\n6.6 Predicting by using Test Data\n\n\n6.6.1 Preparing Test Data\n\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n\n\n\n6.6.2 Predicting with Test Data\n\ngwRF_adaptive <- read_rds(\"data/model/gwRF_adaptive.rds\")\n\n\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\nSaving output to RDS\n\nGRF_pred <- write_rds(gwRF_pred, \"data/model/GRF_pred.rds\")\n\n\n\n6.6.3 Converting the predicted output into a dataframe\nThe output of the predict.grf() is a vector of predicted values. It is wiser to convert it into a data frame for further visualisation and analysis.\n\nGRF_pred <- read_rds(\"data/model/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n\n\n\n6.6.4 Append Predicted Values onto test_data\nCombine data so that we can plot the scatter plot later on.\n\ntest_data_p <- cbind(test_data, GRF_pred_df)\n\n\nwrite_rds(test_data_p, \"data/model/test_data_p.rds\")\n\n\n\n6.6.5 Calculating Root Mean Square Error\n\ntest_data_p <- read_rds(\"data/model/test_data_p.rds\")\n\n\nrmse(test_data_p$resale_price,\n     test_data_p$GRF_pred)\n\n[1] 37533.98\n\n\n\n\n\n\n\n\nNote\n\n\n\nOur RMSE is pretty small, given that the resale price is in the 500,000s and can go up to millions. This RMSE is also smaller than the OLS model’s of 72525.65.\n\n\n\n\n6.6.6 Visualising the predicted values\n\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n\n\n\n\nAdditionally, the points are scattered around the diagonal line which shows that it is a good predictive model.\nThe random forest model performed much better than the OLS Regression. Model."
  }
]