---
title: "Chapter 5: 2nd Order Spatial Point Patterns Analysis"
date-modified: "`r Sys.Date()`"
date: "1 February 2023"
execute: 
  message: false
  warning: false
editor: visual
---


Install R Packages:


```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap)
```


## Spatial Data Wrangling

### Importing data


```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```


## Geospatial Data Wrangling

### Converting sf dataframes to sp's Spatial\* class

Converting simple feature dataframe to sp's spatial class.


```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```


### Converting the spatial class into generic sp format

To convert the Spatial\* class into a ppp object, we need to: Convert Spatial\* class into Spatial object (sp object) then to spatstat ppp object format.


```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```


### Converting generic sp format into spatstat's ppp format


```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```


Check for duplicates:


```{r}
any(duplicated(childcare_ppp))
```


Count number of co-incidence points:


```{r}
multiplicity(childcare_ppp)
```


How many locations have more than one point event:


```{r}
sum(multiplicity(childcare_ppp)>1)
```


There are 128 duplicated point events.

Plotting to view the duplicate points


```{r}
tmap_mode('view')
tm_shape(childcare)+tm_dots(alpha=0.4, size=0.05)

```

```{r}
tmap_mode('plot')
```


### Handling duplicates

Jittering to add a small perturbation to the duplicate points so that they do not occupy the exact same space.


```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```


Check if there are remaining duplicates:


```{r}
any(duplicated(childcare_ppp_jit ))
```


### Create owin object

object called owin is designed the represent a polygonal region.


```{r}
sg_owin <- as(sg_sp, "owin")
```


### Combine point event object with owin object


```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```


### Extract study area


```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```


Plot planning areas:


```{r}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```


### (1) Convert spatial point dataframe into generic sp format


```{r}
pg_sp = as(pg, "SpatialPolygons")
tm_sp = as(tm, "SpatialPolygons")
ck_sp = as(ck, "SpatialPolygons")
jw_sp = as(jw, "SpatialPolygons")
```


### (2) Convert SpatialPolygons into owin objects


```{r}
pg_owin = as(pg_sp, "owin")
tm_owin = as(tm_sp, "owin")
ck_owin = as(ck_sp, "owin")
jw_owin = as(jw_sp, "owin")
```


### (3) Combine childcare points and the study area

-   Extract the areas that you want


```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```


-   Transform the unit of measurement from m to km using *rescale()*


```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```


-   Plot study areas and their locations


```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```


## Analysing Spatial Point Process using G-Function

Distribution of the distances from an arbitrary event to its nearest event. (For segmentation)

at 50 simulations: 95% confidence level

at 99 simulations: 99% confidence level

at 999 simulations: 99.9% confidence level

### Chua Chu Kang

#### G-function estimation


```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```


#### Complete Spatial Randomness Test

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function


```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```


### Tampines

#### G-function


```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```


#### Complete Spatial Randomness Test


```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```


## Analysing Spatial Point Process using F-Function

### Chua Chu Kang

#### F-function


```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```


#### Complete Spatial Randomness Test


```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```


### Tampines

#### F-function


```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```


#### Complete Spatial Randomness Test


```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```


## Analysing Spatial Point Process using K-Function

### Chua Chu Kang

#### K-Function


```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```


#### Complete Spatial Randomness Test


```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```


### Tampines

#### K-Function


```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```


#### Complete Spatial Randomness Test


```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```


## Analysing Spatial Point Process using L-Function

### Chua Chu Kang planning area

#### L Function


```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```


#### Complete Spatial Randomness Test


```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```


-   Fail to reject at the 99% confidence level.
-   At distance of 480m - 560m between childcare centres (outside the grey envelope): clear evidence of clustering & we are confident to reject the null hypothesis.

### Tampines

#### L-function

correction: edge correction to extend the boundary slightly to include data points at the edge.

above reference line: clustering is observed.


```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley") #saved as object
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```


#### Complete Spatial Randomness Test


```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

