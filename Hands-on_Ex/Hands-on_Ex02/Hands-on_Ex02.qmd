---
title: "Hands-on Exercise 2: Choropleth Mapping"
execute:
  warning: false
date: "`r Sys.Date()`"
---

# Data Preparation

## Load Data

```{r}
pacman::p_load(sf, tmap, tidyverse)
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
mpsz
```

## Import Attribute Data into R

```{r}
popdata<-read_csv("data/respopagesextod2011to2020.csv")
```

## Data Wrangling and Transformation

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

**Format data: Upper Case**

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

**Format data: Left join**

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

**Create new R file in data folder**

```{r}
write_rds(mpsz_pop2020, "data/mpszpop2020.rds")
```

## Mapping Geospatial Data using tmap

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

Note: qtm() makes the aesthetics of individual layers hard to control. Hence, tmap's drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### Base Maps

-   t`m_shape()` defines the input data

-   `tm_polygons()` draws the planning subzone polygons

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### Choropleth map with `tm_polygons()`

Assign the target variable to `tm_polygons()`. This will plot a map showing the geographical distribution of the target variable by planning subzone. In the below example, the variable is `"DEPENDENCY"`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

### Choropleth using tm_fill() an tm_border()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

alpha: transparency of the line col: border colour lwd: line width lty: border line type

## Data classification with tmap

There are 10 types of classification methods. fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, jenks.

Use the style argument of tm_fill() or tm_polygons().

### Using in-built classification methods

**Jenks**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

**Equal**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```
